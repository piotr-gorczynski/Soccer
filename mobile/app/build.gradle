apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'

android {

    compileSdk = 36 // Set the compile SDK version

    defaultConfig {
        applicationId = "piotr_gorczynski.soccer2"
        minSdk = 23
        targetSdk = 36
        versionCode = 5
        versionName = '5.0'
        testInstrumentationRunner = "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    buildFeatures {
        buildConfig true          // <- make sure this is present or omit the block
    }

    buildTypes {
        release {
            minifyEnabled = true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/*.version']
        }
    }

    //GPT fixes...

    testOptions {
        unitTests.returnDefaultValues = true
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs += ["-Xlint:deprecation"]
    }

    namespace = 'piotr_gorczynski.soccer2'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //GPT fixes

    implementation 'androidx.constraintlayout:constraintlayout:2.2.1'

    //GPT fixes
     implementation platform('com.google.firebase:firebase-bom:34.0.0')
    implementation 'com.google.firebase:firebase-auth:24.0.0'
    //GPT fixes
    implementation 'androidx.appcompat:appcompat:1.7.1'
    implementation 'androidx.core:core:1.16.0'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'com.google.firebase:firebase-firestore:26.0.0' // or latest version
    //GPT fixes
    implementation 'androidx.preference:preference:1.2.1'
    implementation 'androidx.work:work-runtime:2.10.2'
    implementation 'com.google.firebase:firebase-database:22.0.0'
    //GPT fixes
    // Instrumented test dependencies
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
    //Added dependencies for invoking acceptInvite
    implementation 'com.google.firebase:firebase-functions:22.0.0'
    // FCM
    implementation 'com.google.firebase:firebase-messaging:25.0.0' // Latest as of May 2025

    implementation "com.google.guava:guava:33.4.8-android"

    implementation "androidx.lifecycle:lifecycle-process:2.9.2"
    implementation "androidx.lifecycle:lifecycle-common-java8:2.9.2"
    
    // HTTP client for backend service checks
    implementation 'com.squareup.okhttp3:okhttp:5.1.0'

    // User Messaging Platform SDK
    implementation 'com.google.android.ump:user-messaging-platform:3.2.0'

    implementation 'com.google.android.gms:play-services-ads:24.5.0' // or latest
}

import java.nio.file.Files
import java.nio.file.StandardCopyOption
// Register custom copy task
tasks.register("copyGoogleServicesJson") {
    doLast {
        def source = file("../../secrets/google-services.json")
        def destination = file("google-services.json")
        if (source.exists()) {
            Files.copy(source.toPath(), destination.toPath(), StandardCopyOption.REPLACE_EXISTING)
            println("✅ google-services.json copied to app/")
        } else {
            throw new GradleException("❌ google-services.json not found in secrets/")
        }
    }
}

// Copy the backend secret key from the secrets repository into assets
tasks.register("copySoccerSecretKey") {
    doLast {
        def source = file("../../secrets/soccer_secret_key")
        def assetsDir = file("src/main/assets")
        def destination = new File(assetsDir, "soccer_secret_key")

        if (source.exists()) {
            if (!assetsDir.exists()) {
                assetsDir.mkdirs()
            }
            Files.copy(source.toPath(), destination.toPath(), StandardCopyOption.REPLACE_EXISTING)
            println("✅ soccer_secret_key copied to assets/")
        } else {
            throw new GradleException("❌ soccer_secret_key not found in secrets/")
        }
    }
}

// Hook into the Firebase task *after* all plugins are applied
afterEvaluate {
    tasks.matching { it.name == "processDebugGoogleServices" }.configureEach {
        dependsOn("copyGoogleServicesJson")
    }
    tasks.matching { it.name == "preBuild" }.configureEach {
        dependsOn("copySoccerSecretKey")
    }
}

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /tournaments/{tournamentId} {
      // Permit GET and LIST from any authenticated user
      allow get, list: if request.auth != null;

      // (Optional) if you store sub-collections such as
      // /tournaments/{id}/participants/…
      match /{subDoc=**} {
        allow get, list: if request.auth != null;
      }
    }

    // 1. Users: anyone signed-in can read any profile,
    //    but only the owner can create or modify their own doc.
    match /users/{userId} {
      allow read: if request.auth.uid != null;

      // Allow a user to create their own profile document,
      // and to update it thereafter (e.g. save FCM token).
      allow create, update: if request.auth.uid == userId;

      // No one else may delete or overwrite another’s profile.
      allow delete: if false;
    }

    // 2. Invitations: sender may create, either party may read
    match /invitations/{invId} {
      allow create: if request.auth.uid == request.resource.data.from
                 && request.resource.data.status == "pending"
                 && request.resource.data.to is string;
      allow read:   if request.auth.uid == resource.data.from
                 || request.auth.uid == resource.data.to;
      allow update, delete: if false;
    }

    // 3. Matches: only participants may create/read/update
    /* ── helper ───────────────────────────────────────────── */
    function isSignedIn() { return request.auth != null; }

    /* ── /matches/{matchId} ───────────────────────────────── */
    match /matches/{matchId} {

      /* 1️⃣  allow queries (WaitingActivity uses a list query) */
      allow list: if isSignedIn();     // no access to resource.data here

      /* 2️⃣  allow client-side creation of a match document */
      allow create:
        if isSignedIn() &&
           (request.auth.uid == request.resource.data.player0 ||
            request.auth.uid == request.resource.data.player1) &&     // must be one of the players
           request.resource.data.player0 is string &&
           request.resource.data.player1 is string &&                 // quick type check
           request.resource.data.invitationId is string &&            // required field
           // optional: keep the document schema tight
           request.resource.data.keys().hasOnly([
             'player0','player1','invitationId','createdAt','status',
             'remainingTime0','remainingTime1','turn','turnStartTime','updatedAt',
             'reason','winner'        // include any other legit fields
           ]);

      /* 3️⃣  protect existing docs (read single, edit, delete) */
      allow get, update, delete:
        if isSignedIn() &&
           request.auth.uid in [resource.data.player0, resource.data.player1];

      /* 4️⃣  moves / clocks / other sub-collections */
      match /{sub=**} {
        allow read, write:
          if isSignedIn() &&
             request.auth.uid in [resource.data.player0, resource.data.player1];
      }
    }

    // 4. Everything else denied
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

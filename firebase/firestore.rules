rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /tournaments/{tournamentId} {
      // Permit GET and LIST from any authenticated user
      allow get, list: if request.auth != null;

      // (Optional) if you store sub-collections such as
      // /tournaments/{id}/participants/…
      match /{subDoc=**} {
        allow get, list: if request.auth != null;
      }
    }

    // 1. Users: anyone signed-in can read any profile,
    //    but only the owner can create or modify their own doc.
    match /users/{userId} {
      allow read: if request.auth.uid != null;

      // Allow a user to create their own profile document,
      // and to update it thereafter (e.g. save FCM token).
      allow create, update: if request.auth.uid == userId;

      // No one else may delete or overwrite another’s profile.
      allow delete: if false;
    }

    // 2. Invitations: server-only writes, either party may read
    match /invitations/{invId} {
      // clients may only **read** invitations where they are a party
      allow read: if request.auth != null
               && (request.auth.uid == resource.data.from
                   || request.auth.uid == resource.data.to);
      // all client-side writes are blocked; Cloud Functions use Admin SDK
      allow create, update, delete: if false;
    }

    // 3. Matches: only participants may create/read/update
    /* ── helper ───────────────────────────────────────────── */
    function isSignedIn() { return request.auth != null; }
    function isMatchPlayer(matchId) {
      return request.auth.uid in [
        get(/databases/$(database)/documents/matches/$(matchId)).data.player0,
        get(/databases/$(database)/documents/matches/$(matchId)).data.player1
      ];
    }

    // -------------------------------------------------------------------
    //  🆕  Tournament matches  /tournaments/{tid}/matches/{mid}
    // -------------------------------------------------------------------
    match /tournaments/{tid}/matches/{matchId} {

      function isParticipant() {
        /*  During create() the document doesn’t exist yet, so fall back to
            request.resource.data while still allowing reads/updates later. */
        return request.auth.uid in [
          (resource != null ? resource.data.player0 : request.resource.data.player0),
          (resource != null ? resource.data.player1 : request.resource.data.player1)
        ];
      }

      // 📝 Create a new match (friendlies or Cloud Function)
      allow create: if isSignedIn()
                 && isParticipant()
                 && request.resource.data.player0 is string
                 && request.resource.data.player1 is string;

      /* reads for collection-group queries */
      allow get, list: if isSignedIn();          // anyone logged-in may read

      /* writes still restricted to participants */
      allow update, delete: if isSignedIn() && isParticipant();

      // ── moves sub-collection *for nested matches* ─────────────
      match /moves/{moveId} {
        /* The parent match doc lives at a fixed location now, so:
           /tournaments/{tid}/matches/{matchId}                         */
        function parentMatch() {
          return get(
            /databases/$(database)/documents/tournaments/$(tid)/matches/$(matchId)
          ).data;
        }
        function allowedPlayer() {
          return request.auth.uid in [
            parentMatch().player0,
            parentMatch().player1
          ];
        }

        /* reads stay the same */
        allow read  : if isSignedIn() && allowedPlayer();

        /* simple “participant can add” ✅ */
        allow create: if isSignedIn() && allowedPlayer();

        allow update, delete: if false;
      }
    }

    /* ── FRIENDLY matches  /matches/{matchId} ─────────────────── */
    match /matches/{matchId} {

      /* 2️⃣  allow client-side creation of a match document */
      allow create: if isSignedIn() && isMatchPlayer(matchId)
                    && request.resource.data.player0 is string
                    && request.resource.data.player1 is string;

      /* reads for collection-group queries */
      allow get, list: if isSignedIn();          // top-level friendlies

      /* writes still restricted to participants */
      allow update, delete: if isSignedIn() && isMatchPlayer(matchId);

      /* ---- moves sub-collection ---- */
      match /moves/{moveId} {
        allow read, write: if isSignedIn() && isMatchPlayer(matchId);
      }
    }

    /* ────────────────────────────────────────────────────────────────
     *  FALLBACK: ANY other collection named "matches" at ANY depth
     *  (catches /foo/bar/matches/{matchId}, etc.)
     *  Read-only for signed-in users so your collectionGroup() never fails.
     * ─────────────────────────────────────────────────────────────── */
    match /{path=**}/matches/{matchId} {
      allow get, list: if isSignedIn();
      // no writes here
    }

    // Regulations: read-only for authenticated users
    match /regulations/{docId} {
      allow read: if request.auth != null;
      allow write: if false;
    }

    // App configuration settings (e.g. ads frequency)
    match /settings/{docId} {
      // Only allow reads from authenticated users
      allow read: if request.auth != null;
      // No client-side writes permitted
      allow write: if false;
    }

    // 4. Everything else denied
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

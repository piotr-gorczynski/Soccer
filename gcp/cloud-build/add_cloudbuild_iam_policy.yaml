substitutions:
  _ROLE: 'roles/cloudbuild.builds.builder'   # Required role
  _SECRET_ACCESSOR_ROLE: 'roles/secretmanager.secretAccessor' # Secret Manager role
  _TOKEN_CREATOR_ROLE: 'roles/iam.serviceAccountTokenCreator' # Service Account Token Creator role
  _FIREBASE_ADMIN_ROLE: 'roles/firebase.admin' # Firebase Admin role
  _FIREBASE_DEVELOPER_ROLE: 'roles/firebase.developAdmin' # Firebase Developer Admin role
  _EDITOR_ROLE: 'roles/editor'  # Editor role required for deployments
  _SERVICE_USAGE_ADMIN_ROLE: 'roles/serviceusage.serviceUsageAdmin'  # ✅ Service Usage Admin role
  _FOLDER_NAME: 'soccer'                    # Parent folder name
  _ENVIRONMENT: 'dev'                       # Environment delivered from the trigger

steps:
  # Step 1: Retrieve the project ID
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Checking if project starting with ${_FOLDER_NAME}-${_ENVIRONMENT} exists..."
        gcloud projects list \
          --filter="name~^${_FOLDER_NAME}-${_ENVIRONMENT}" \
          --format="value(projectId)" | head -n 1 > /workspace/project_name.txt

        if [ ! -s /workspace/project_name.txt ] || [ -z "$(cat /workspace/project_name.txt)" ]; then
          echo "Error: Project ID not found. Ensure the project exists."
          exit 1
        fi
        echo "Using project: $(cat /workspace/project_name.txt)"

  # Step 2: Retrieve the project number
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Retrieving project number for project: $(cat /workspace/project_name.txt)..."
        gcloud projects describe "$(cat /workspace/project_name.txt)" \
          --format="value(projectNumber)" > /workspace/project_number.txt

        if [ ! -s /workspace/project_number.txt ] || [ -z "$(cat /workspace/project_number.txt)" ]; then
          echo "Error: Project number not found. Ensure the project exists and you have proper permissions."
          exit 1
        fi
        echo "Project number retrieved: $(cat /workspace/project_number.txt)"

  # Step 3: Add IAM policy binding for Cloud Build
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Adding IAM policy binding for Cloud Build service account..."
        gcloud projects add-iam-policy-binding "$(cat /workspace/project_name.txt)" \
          --member="serviceAccount:$(cat /workspace/project_number.txt)-compute@developer.gserviceaccount.com" \
          --role="${_ROLE}" || {
          echo "Error: Failed to add IAM policy binding for Cloud Build."
          exit 1
        }
        echo "Cloud Build IAM policy binding added successfully."

  # Step 4: Add IAM policy binding for Secret Manager
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Adding IAM policy binding for Secret Manager..."
        gcloud secrets add-iam-policy-binding soccer_secret_key \
          --member="serviceAccount:$(cat /workspace/project_number.txt)-compute@developer.gserviceaccount.com" \
          --role="${_SECRET_ACCESSOR_ROLE}" || {
          echo "Error: Failed to add IAM policy binding for Secret Manager."
          exit 1
        }
        echo "Secret Manager IAM policy binding added successfully."

  # Step 5: Add IAM policy binding for Service Account Token Creator
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Adding IAM policy binding for Service Account Token Creator..."
        gcloud projects add-iam-policy-binding "$(cat /workspace/project_name.txt)" \
          --member="serviceAccount:cloud-build-sa@org-service-account-001.iam.gserviceaccount.com" \
          --role="${_TOKEN_CREATOR_ROLE}" || {
          echo "Error: Failed to add IAM policy binding for Service Account Token Creator."
          exit 1
        }
        echo "Service Account Token Creator IAM policy binding added successfully."

  # Step 6: Add IAM policy binding for Firebase Admin
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Adding IAM policy binding for Firebase Admin..."
        gcloud projects add-iam-policy-binding "$(cat /workspace/project_name.txt)" \
          --member="serviceAccount:cloud-build-sa@org-service-account-001.iam.gserviceaccount.com" \
          --role="${_FIREBASE_ADMIN_ROLE}" || {
          echo "Error: Failed to add IAM policy binding for Firebase Admin."
          exit 1
        }
        echo "Firebase Admin IAM policy binding added successfully."

  # Step 7: Add IAM policy binding for Firebase Developer
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Adding IAM policy binding for Firebase Developer..."
        gcloud projects add-iam-policy-binding "$(cat /workspace/project_name.txt)" \
          --member="serviceAccount:cloud-build-sa@org-service-account-001.iam.gserviceaccount.com" \
          --role="${_FIREBASE_DEVELOPER_ROLE}" || {
          echo "Error: Failed to add IAM policy binding for Firebase Developer."
          exit 1
        }
        echo "Firebase Developer IAM policy binding added successfully."

  # Step 8: Add IAM policy binding for Editor (Required for Deployments)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Adding IAM policy binding for Editor role..."
        gcloud projects add-iam-policy-binding "$(cat /workspace/project_name.txt)" \
          --member="serviceAccount:cloud-build-sa@org-service-account-001.iam.gserviceaccount.com" \
          --role="${_EDITOR_ROLE}" || {
          echo "Error: Failed to add IAM policy binding for Editor role."
          exit 1
        }
        echo "Editor IAM policy binding added successfully."

  # ✅ Step 9: Add IAM policy binding for Service Usage Admin
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Adding IAM policy binding for Service Usage Admin..."
        gcloud projects add-iam-policy-binding "$(cat /workspace/project_name.txt)" \
          --member="serviceAccount:cloud-build-sa@org-service-account-001.iam.gserviceaccount.com" \
          --role="${_SERVICE_USAGE_ADMIN_ROLE}" || {
          echo "Error: Failed to add IAM policy binding for Service Usage Admin."
          exit 1
        }
        echo "Service Usage Admin IAM policy binding added successfully."

options:
  logging: CLOUD_LOGGING_ONLY

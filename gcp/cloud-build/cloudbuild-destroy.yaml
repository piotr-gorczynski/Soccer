substitutions:
  _ORG_ID: '799174817843'    # Organization ID
  _FOLDER_NAME: 'soccer'     # Parent folder name
  _ENVIRONMENT: 'dev'        # Environment delivered from the trigger

steps:
  # Step 1: Retrieve the Folder ID for the specified folder within the organization
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Retrieving the Folder ID for '${_FOLDER_NAME}' under organization ${_ORG_ID}..."
        gcloud resource-manager folders list \
          --organization="${_ORG_ID}" \
          --filter="displayName=${_FOLDER_NAME}" \
          --format="value(name.basename())" > /workspace/folder_id.txt
        if [ ! -s /workspace/folder_id.txt ]; then
          echo "Error: Folder '${_FOLDER_NAME}' not found. Exiting."
          exit 1
        else
          echo "Folder ID retrieved: $(cat /workspace/folder_id.txt)"
        fi

  # Step 2: Delete the project with the name starting with "${_FOLDER_NAME}-${_ENVIRONMENT}-" and conditionally delete the folder
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Installing jq for JSON processing..."
        apt-get update && apt-get install -y jq

        echo "Searching for projects starting with '${_FOLDER_NAME}-${_ENVIRONMENT}-' under folder ID $(cat /workspace/folder_id.txt)..."
        gcloud projects list \
          --filter="parent.id=$(cat /workspace/folder_id.txt) AND name~^${_FOLDER_NAME}-${_ENVIRONMENT}-" \
          --format="value(projectId)" > /workspace/project_to_delete.txt
        if [ -s /workspace/project_to_delete.txt ]; then
          echo "Deleting project: $(cat /workspace/project_to_delete.txt)"
          gcloud projects delete $(cat /workspace/project_to_delete.txt) --quiet
          echo "Project $(cat /workspace/project_to_delete.txt) successfully deleted."
        else
          echo "No matching projects found. Skipping project deletion."
        fi

        echo "Checking for remaining ACTIVE projects under folder ID $(cat /workspace/folder_id.txt)..."
        gcloud projects list \
          --filter="parent.id=$(cat /workspace/folder_id.txt)" \
          --format="json(projectId, lifecycleState)" > /workspace/remaining_projects.json
        jq -r '.[] | select(.lifecycleState=="ACTIVE") | .projectId' /workspace/remaining_projects.json > /workspace/remaining_active_projects.txt

        if [ -s /workspace/remaining_active_projects.txt ]; then
          echo "Remaining ACTIVE projects found. Skipping folder deletion."
          echo "Contents of remaining projects:"
          cat /workspace/remaining_active_projects.txt
        else
          echo "No remaining ACTIVE projects found. Deleting folder ID $(cat /workspace/folder_id.txt)..."
          gcloud resource-manager folders delete $(cat /workspace/folder_id.txt) --quiet
          echo "Folder $(cat /workspace/folder_id.txt) successfully deleted."
        fi

options:
  logging: CLOUD_LOGGING_ONLY

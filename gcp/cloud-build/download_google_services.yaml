substitutions:
  _ENVIRONMENT: 'dev'
  _FOLDER_NAME: 'soccer'
  _PRIVATE_REPO: 'git@github.com:piotr-gorczynski/Soccer-private.git'
  _BRANCH_NAME: 'main'
  _TARGET_PATH: 'firebase/google-services.json'

availableSecrets:
  secretManager:
    - versionName: projects/org-service-account-001/secrets/github_ssh_key_soccer_private/versions/latest
      env: 'ssh_private_key'

steps:
  # Step 1: Get Firebase project ID
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: 'get-firebase-project-id'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        set -x
        echo "Looking for project starting with ${_FOLDER_NAME}-${_ENVIRONMENT}..."
        gcloud projects list \
          --filter="name~^${_FOLDER_NAME}-${_ENVIRONMENT}" \
          --format="value(projectId)" | head -n 1 > /workspace/SOCCER_PROJECT_ID.txt

        if [ ! -s /workspace/SOCCER_PROJECT_ID.txt ] || [ -z "$(cat /workspace/SOCCER_PROJECT_ID.txt)" ]; then
          echo "❌ Error: Project ID not found."
          exit 1
        fi

        echo "✅ Firebase project ID: $(cat /workspace/SOCCER_PROJECT_ID.txt)"

  # Step 2: Install Firebase CLI
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: 'install-firebase-cli'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        set -x
        curl -sL https://firebase.tools | bash
        mkdir -p /workspace/firebase
        cp /usr/local/bin/firebase /workspace/firebase/
        chmod +x /workspace/firebase/firebase

  # Step 3: Extract Android app ID and download config
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: 'download-config'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        set -x
        project_id=$(cat /workspace/SOCCER_PROJECT_ID.txt)

        echo "Fetching Firebase Android app ID for project: $project_id"
        firebase_output=$(/workspace/firebase/firebase apps:list --project="$project_id")
        echo "🔍 Firebase apps output:"
        echo "$firebase_output"

        app_id=$(echo "$firebase_output" | grep ANDROID | awk -F'│' '{print $2}' | xargs)

        if [ -z "$app_id" ]; then
          echo "❌ Firebase Android app ID not found."
          exit 1
        fi

        echo "📥 Downloading google-services.json for app ID: $app_id"
        /workspace/firebase/firebase apps:sdkconfig android "$app_id" \
          --project="$project_id" \
          > /workspace/google-services.json

  # Step 4: Clone private repo and add config file
  - name: 'gcr.io/cloud-builders/git'
    id: 'clone-repo'
    secretEnv: ['ssh_private_key']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        set -x
        mkdir -p /root/.ssh
        echo "$ssh_private_key" > /root/.ssh/id_ed25519
        chmod 400 /root/.ssh/id_ed25519
        ssh-keyscan github.com >> /root/.ssh/known_hosts

        git config --global user.email "ci-bot@soccer.dev"
        git config --global user.name "CI Bot"

        git clone ${_PRIVATE_REPO} /workspace/private-repo
        cp /workspace/google-services.json /workspace/private-repo/${_TARGET_PATH}

  # Step 5: Commit and push changes
  - name: 'gcr.io/cloud-builders/git'
    id: 'commit-and-push'
    dir: '/workspace/private-repo'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        set -x
        git add ${_TARGET_PATH}
        git commit -m "🔄 Update google-services.json from Firebase [CI]"
        git push origin ${_BRANCH_NAME}

options:
  logging: CLOUD_LOGGING_ONLY

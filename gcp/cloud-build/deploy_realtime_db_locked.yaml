# deploy_realtime_db_locked.yaml
substitutions:
  _ENVIRONMENT: 'dev'
  _FOLDER_NAME: 'soccer'

steps:
# 0. Resolve Firebase project ID & number
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: 'get-project-info'
  entrypoint: bash
  args:
    - '-c'
    - |
      set -ex
      # find the project ID
      gcloud projects list \
        --filter="name~^${_FOLDER_NAME}-${_ENVIRONMENT}" \
        --format="value(projectId)" \
      | head -n1 > /workspace/firebase_project_id.txt
      test -s /workspace/firebase_project_id.txt

      # fetch its numeric project number
      project_id=$(< /workspace/firebase_project_id.txt)
      gcloud projects describe "$project_id" \
        --format="value(projectNumber)" \
        > /workspace/firebase_project_number.txt
      test -s /workspace/firebase_project_number.txt

# 1. Grant Cloud Build SA Realtime Database Admin role
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: 'grant-firebase-db-admin-role'
  entrypoint: bash
  args:
    - '-c'
    - |
      set -ex
      project=$(< /workspace/firebase_project_id.txt)
      number=$(< /workspace/firebase_project_number.txt)
      echo "🔐 Granting roles/firebasedatabase.admin to Cloud Build SA..."
      gcloud projects add-iam-policy-binding "$project" \
        --member="serviceAccount:${number}@cloudbuild.gserviceaccount.com" \
        --role="roles/firebasedatabase.admin" \
        --quiet

# 2. Clone your source (to pull in firebase.json & database.rules.json)
- name: 'gcr.io/cloud-builders/git'
  id: 'pull-source'
  entrypoint: bash
  args:
    - '-c'
    - |
      set -ex
      git clone -b development --single-branch \
        https://github.com/piotr-gorczynski/Soccer.git /workspace/soccer
      cp /workspace/soccer/gcp/cloud-build/firebase.json    /workspace/firebase.json
      cp /workspace/soccer/gcp/cloud-build/database.rules.json /workspace/database.rules.json

# 3. Install Firebase CLI
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: 'install-firebase-cli'
  entrypoint: bash
  args:
    - '-c'
    - |
      set -ex
      echo "⬇️ Installing Firebase CLI..."
      curl -sL https://firebase.tools | bash
      mkdir -p /workspace/firebase
      cp /usr/local/bin/firebase /workspace/firebase/
      chmod +x /workspace/firebase/firebase
      echo "✅ Firebase CLI installed."

# 4. Create the default RTDB via Management REST API
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: 'create-default-rtdb-via-api'
  entrypoint: bash
  args:
    - '-c'
    - |
      set -ex
      project_number=$(< /workspace/firebase_project_number.txt)
      project_id=$(< /workspace/firebase_project_id.txt)
      instance_id="${project_id}-default-rtdb"
      location="us-central1"

      echo "🚀 Creating default RTDB $instance_id in $location via REST API…"
      token=$(gcloud auth print-access-token)

      http_code=$(
        curl -s -o /dev/null -w "%{http_code}" \
          -X POST \
          -H "Authorization: Bearer $token" \
          "https://firebasedatabase.googleapis.com/v1beta/projects/${project_number}/locations/${location}/instances?databaseId=${instance_id}"
      )

      if [[ "$http_code" == "200" ]] || [[ "$http_code" == "409" ]]; then
        echo "✅ RTDB default instance created (or already exists)."
      else
        echo "❌ Failed to create default RTDB (HTTP $http_code)." >&2
        exit 1
      fi

# 5. Deploy locked-mode rules via firebase.json
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: 'deploy-locked-rules'
  entrypoint: bash
  args:
    - '-c'
    - |
      set -ex
      project=$(< /workspace/firebase_project_id.txt)
      cd /workspace
      echo "🔒 Deploying locked-mode rules…"
      /workspace/firebase/firebase deploy \
        --only database \
        --project "$project" \
        --force

options:
  logging: CLOUD_LOGGING_ONLY

# deploy_realtime_db_locked.yaml
substitutions:
  _ENVIRONMENT: 'dev'
  _FOLDER_NAME: 'soccer'

steps:
# 0. Resolve Firebase project ID & number
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: 'get-project-info'
  entrypoint: bash
  args:
    - '-c'
    - |
      set -ex
      # project ID
      gcloud projects list \
        --filter="name~^${_FOLDER_NAME}-${_ENVIRONMENT}" \
        --format="value(projectId)" | head -n1 \
        > /workspace/firebase_project_id.txt
      test -s /workspace/firebase_project_id.txt

      # project number
      project_id=$(< /workspace/firebase_project_id.txt)
      gcloud projects describe "$project_id" \
        --format="value(projectNumber)" \
        > /workspace/firebase_project_number.txt
      test -s /workspace/firebase_project_number.txt

# 1. Grant DB-Admin + TokenCreator on the Admin-SDK SA in your Firebase project
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: 'grant-db-admin-and-token-creator'
  entrypoint: bash
  args:
    - '-c'
    - |
      set -ex
      project=$(< /workspace/firebase_project_id.txt)

      # 1a) discover the real Admin SDK SA by email prefix
      admin_sa=$(gcloud iam service-accounts list \
        --project="$project" \
        --filter="email:firebase-adminsdk" \
        --format="value(email)")
      test -n "$admin_sa"

      # 1b) whichever SA is running this build
      build_sa=$(gcloud auth list \
        --filter="status:ACTIVE" \
        --format="value(account)")

      echo "🔐 Binding roles/firebasedatabase.admin & iam.serviceAccountTokenCreator..."

      # allow the build SA to call the RTDB admin API
      gcloud projects add-iam-policy-binding "$project" \
        --member="serviceAccount:${build_sa}" \
        --role="roles/firebasedatabase.admin" \
        --quiet

      # allow it to mint tokens as the Admin-SDK SA
      gcloud iam service-accounts add-iam-policy-binding "$admin_sa" \
        --member="serviceAccount:${build_sa}" \
        --role="roles/iam.serviceAccountTokenCreator" \
        --project="$project" \
        --quiet



# 2. Enable the Realtime Database Management API
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: 'enable-rtdb-api'
  entrypoint: bash
  args:
    - '-c'
    - |
      set -ex
      project=$(< /workspace/firebase_project_id.txt)
      gcloud services enable firebasedatabase.googleapis.com \
        --project="$project" --quiet

# 3. Small delay to let IAM & service enablement propagate
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: 'wait-for-propagation'
  entrypoint: bash
  args:
    - '-c'
    - |
      set -ex
      echo "⏳ Waiting 15s for IAM & API enablement to propagate..."
      sleep 15

# 4. Clone your source (to pull in firebase.json & database.rules.json)
- name: 'gcr.io/cloud-builders/git'
  id: 'pull-source'
  entrypoint: bash
  args:
    - '-c'
    - |
      set -ex
      git clone -b development --single-branch \
        https://github.com/piotr-gorczynski/Soccer.git /workspace/soccer
      cp /workspace/soccer/gcp/cloud-build/firebase.json    /workspace/firebase.json
      cp /workspace/soccer/gcp/cloud-build/database.rules.json /workspace/database.rules.json

# 5. Install Firebase CLI
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: 'install-firebase-cli'
  entrypoint: bash
  args:
    - '-c'
    - |
      set -ex
      curl -sL https://firebase.tools | bash
      mkdir -p /workspace/firebase
      cp /usr/local/bin/firebase /workspace/firebase/
      chmod +x /workspace/firebase/firebase

# 6. Create the DEFAULT Realtime Database instance (idempotent)
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: 'create-default-rtdb'
  entrypoint: bash
  args:
    - '-c'
    - |
      set -euo pipefail
      project=$(< /workspace/firebase_project_id.txt)
      project_number=$(< /workspace/firebase_project_number.txt)
      location="us-central1"

      echo "🔍 Checking for an existing default RTDB …"
      default_exists=$(curl -s \
        "https://firebasedatabase.googleapis.com/v1beta/projects/${project_number}/locations/${location}/instances" |
        grep -q '"type": "DEFAULT_DATABASE"' && echo "yes" || echo "no")

      if [[ "$default_exists" == "yes" ]]; then
        echo "ℹ️ Default RTDB already present – skipping create step."
        exit 0
      fi

      # ------------------------------------------------------------------
      # No default yet → create one
      # ------------------------------------------------------------------
      admin_sa=$(gcloud iam service-accounts list \
                   --project="$project" \
                   --filter=email:firebase-adminsdk \
                   --format="value(email)")
      token=$(gcloud auth print-access-token \
                 --impersonate-service-account="$admin_sa")

      echo "🚀 Creating DEFAULT_DATABASE for ${project} …"
      code=$(curl -s -o /dev/null -w '%{http_code}' -X POST \
        -H "Authorization: Bearer ${token}" \
        -H "Content-Type: application/json" \
        -d '{"type":"DEFAULT_DATABASE"}' \
        "https://firebasedatabase.googleapis.com/v1beta/projects/${project_number}/locations/${location}/instances")

      case "$code" in
        200) echo "✅ Default RTDB created." ;;
        409|400) echo "ℹ️ Default RTDB already exists (HTTP ${code}). Continuing." ;;
        *)  echo "❌ Failed to create default RTDB (HTTP ${code})." ; exit 1 ;;
      esac

# 7. Deploy locked-mode rules via REST API
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: 'deploy-locked-rules'
  entrypoint: bash
  args:
    - '-c'
    - |
      set -ex

      project=$(< /workspace/firebase_project_id.txt)

      # your default Realtime-DB url (as returned by the create step)
      db_url="https://${project}-default-rtdb.firebaseio.com"

      # find the Admin-SDK service account in this project
      admin_sa=$(gcloud iam service-accounts list \
        --project="$project" \
        --filter="email:firebase-adminsdk" \
        --format="value(email)")

      echo "🔒 Impersonating $admin_sa to push rules to $db_url..."
      token=$(gcloud auth print-access-token \
        --impersonate-service-account="$admin_sa")

      echo "🔒 PUTting rules from database.rules.json → $db_url/.settings/rules.json"
      http_code=$(curl -s -w '%{http_code}' -o /dev/null -X PUT \
        -H "Content-Type: application/json" \
        --data-binary @database.rules.json \
        "${db_url}/.settings/rules.json?access_token=${token}")

      if [[ "$http_code" == "200" ]]; then
        echo "✅ Rules successfully deployed (HTTP 200)."
      else
        echo "❌ Rules deployment failed (HTTP $http_code)." >&2
        exit 1
      fi


options:
  logging: CLOUD_LOGGING_ONLY

# deploy_realtime_db_locked.yaml
substitutions:
  _ENVIRONMENT: 'dev'
  _FOLDER_NAME: 'soccer'

steps:
# 0. Resolve Firebase project ID & number
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: 'get-project-info'
  entrypoint: bash
  args:
    - '-c'
    - |
      set -ex
      # project ID
      gcloud projects list \
        --filter="name~^${_FOLDER_NAME}-${_ENVIRONMENT}" \
        --format="value(projectId)" | head -n1 \
        > /workspace/firebase_project_id.txt
      test -s /workspace/firebase_project_id.txt

      # project number
      project_id=$(< /workspace/firebase_project_id.txt)
      gcloud projects describe "$project_id" \
        --format="value(projectNumber)" \
        > /workspace/firebase_project_number.txt
      test -s /workspace/firebase_project_number.txt

# 1. Grant DB-Admin + TokenCreator on the Admin-SDK SA in YOUR firebase project
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: 'grant-db-admin-and-token-creator'
  entrypoint: bash
  args:
    - '-c'
    - |
      set -ex
      project=$(< /workspace/firebase_project_id.txt)

      # the SA you want to impersonate
      admin_sa="firebase-adminsdk@${project}.iam.gserviceaccount.com"

      # whichever SA is running this build
      build_sa=$(gcloud auth list --filter=status:ACTIVE \
                 --format="value(account)")

      echo "🔐 Binding roles/firebasedatabase.admin & iam.serviceAccountTokenCreator..."

      # 1️⃣ allow the build SA to call the Realtime-DB admin API
      gcloud projects add-iam-policy-binding "$project" \
        --member="serviceAccount:${build_sa}" \
        --role="roles/firebasedatabase.admin" \
        --quiet

      # 2️⃣ allow it to mint tokens as the Admin-SDK SA
      gcloud iam service-accounts add-iam-policy-binding \
        "$admin_sa" \
        --member="serviceAccount:${build_sa}" \
        --role="roles/iam.serviceAccountTokenCreator" \
        --project="$project" \
        --quiet



# 2. Enable the Realtime Database Management API
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: 'enable-rtdb-api'
  entrypoint: bash
  args:
    - '-c'
    - |
      set -ex
      project=$(< /workspace/firebase_project_id.txt)
      gcloud services enable firebasedatabase.googleapis.com \
        --project="$project" --quiet

# 3. Small delay to let IAM & service enablement propagate
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: 'wait-for-propagation'
  entrypoint: bash
  args:
    - '-c'
    - |
      set -ex
      echo "⏳ Waiting 15s for IAM & API enablement to propagate..."
      sleep 15

# 4. Clone your source (to pull in firebase.json & database.rules.json)
- name: 'gcr.io/cloud-builders/git'
  id: 'pull-source'
  entrypoint: bash
  args:
    - '-c'
    - |
      set -ex
      git clone -b development --single-branch \
        https://github.com/piotr-gorczynski/Soccer.git /workspace/soccer
      cp /workspace/soccer/gcp/cloud-build/firebase.json    /workspace/firebase.json
      cp /workspace/soccer/gcp/cloud-build/database.rules.json /workspace/database.rules.json

# 5. Install Firebase CLI
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: 'install-firebase-cli'
  entrypoint: bash
  args:
    - '-c'
    - |
      set -ex
      curl -sL https://firebase.tools | bash
      mkdir -p /workspace/firebase
      cp /usr/local/bin/firebase /workspace/firebase/
      chmod +x /workspace/firebase/firebase

# 6. Create the default RTDB via Management REST API
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: 'create-default-rtdb'
  entrypoint: bash
  args:
    - '-c'
    - |
      set -ex
      project=$(< /workspace/firebase_project_id.txt)
      number=$(gcloud projects describe "$project" \
                --format="value(projectNumber)")
      inst="${project}-default-rtdb"
      loc="us-central1"

      echo "🚀 Impersonating $admin_sa to create RTDB $inst…"
      token=$(gcloud auth print-access-token \
        --impersonate-service-account="firebase-adminsdk-${project}@${project}.iam.gserviceaccount.com")

      resp=$(curl -s -w '\n%{http_code}' -X POST \
        -H "Authorization: Bearer $token" \
        "https://firebasedatabase.googleapis.com/v1beta/projects/${number}/locations/${loc}/instances?databaseId=${inst}")

      code=$(echo "$resp" | tail -n1)
      body=$(echo "$resp" | sed '$d')

      if [[ "$code" == "200" ]]; then
        echo "✅ Created:"; echo "$body"
      elif [[ "$code" == "409" ]]; then
        echo "✅ Already exists."
      else
        echo "❌ HTTP $code" >&2
        echo "$body" >&2
        exit 1
      fi

# 7. Deploy locked-mode rules via firebase.json
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: 'deploy-locked-rules'
  entrypoint: bash
  args:
    - '-c'
    - |
      set -ex
      project=$(< /workspace/firebase_project_id.txt)
      cd /workspace
      /workspace/firebase/firebase deploy \
        --only database \
        --project "$project" \
        --force

options:
  logging: CLOUD_LOGGING_ONLY

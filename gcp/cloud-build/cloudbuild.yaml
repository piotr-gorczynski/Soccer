steps:
  # Step 1: Generate the list of triggers starting with 3 digits and sort them
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: 'list-and-sort-triggers'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Listing triggers that follow the naming convention..."
        gcloud beta builds triggers list --project=org-service-account-001 \
          --format="value(name, id)" | grep -E '^[0-9]{3}-' | sort > /workspace/sorted_triggers.txt

        echo "Sorted triggers:"
        cat /workspace/sorted_triggers.txt

  # Step 2: Loop through each sorted trigger and run them
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: 'run-sorted-triggers'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        while IFS= read -r line; do
          echo "$line" | cut -d' ' -f1 > /workspace/trigger_name.txt
          echo "$line" | cut -d' ' -f2 > /workspace/trigger_id.txt

          if [ ! -s /workspace/trigger_name.txt ] || [ ! -s /workspace/trigger_id.txt ]; then
            echo "Error: Failed to parse trigger details."
            exit 1
          fi

          echo "Starting trigger: $(cat /workspace/trigger_name.txt) with ID: $(cat /workspace/trigger_id.txt)..."
          gcloud beta builds triggers run $(cat /workspace/trigger_id.txt) \
            --project=org-service-account-001 \
            --substitutions=_ENVIRONMENT=${_ENVIRONMENT} \
            --format="value(metadata.build.id)" > /workspace/build_id.txt

          if [ ! -s /workspace/build_id.txt ]; then
            echo "Error: Failed to retrieve Build ID for $(cat /workspace/trigger_name.txt)."
            exit 1
          fi

          echo "Trigger started. Build ID: $(cat /workspace/build_id.txt)"
          while true; do
            gcloud builds describe $(cat /workspace/build_id.txt) \
              --format="value(status)" --project=org-service-account-001 > /workspace/build_status.txt

            if [ ! -s /workspace/build_status.txt ]; then
              echo "Error: Failed to retrieve Build Status for $(cat /workspace/trigger_name.txt)."
              exit 1
            fi

            echo "Current status of $(cat /workspace/trigger_name.txt): $(cat /workspace/build_status.txt)"
            if [[ "$(cat /workspace/build_status.txt)" == "SUCCESS" ]]; then
              echo "$(cat /workspace/trigger_name.txt) completed successfully."
              break
            elif [[ "$(cat /workspace/build_status.txt)" == "FAILURE" || "$(cat /workspace/build_status.txt)" == "CANCELLED" ]]; then
              echo "Error: $(cat /workspace/trigger_name.txt) failed with status $(cat /workspace/build_status.txt)."
              exit 1
            else
              echo "Waiting for completion of $(cat /workspace/trigger_name.txt)..."
              sleep 10
            fi
          done
        done < /workspace/sorted_triggers.txt

timeout: '3600s' # Timeout for the entire build
options:
  logging: CLOUD_LOGGING_ONLY
  substitutionOption: ALLOW_LOOSE

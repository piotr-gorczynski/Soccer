steps:
  # Trigger: 010-check-or-create-folder
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: '010-check-or-create-folder'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Starting trigger: check-or-create-folder..."
        BUILD_ID=$(gcloud beta builds triggers run 83bf9b23-f39e-4c32-82f2-15da23226de5 \
          --project=org-service-account-001 --format="value(metadata.build.id)")
        echo "Trigger started. Build ID: $BUILD_ID"
        while true; do
          STATUS=$(gcloud builds describe $BUILD_ID --format="value(status)" --project=org-service-account-001)
          echo "Current status: $STATUS"
          if [[ "$STATUS" == "SUCCESS" ]]; then
            echo "Trigger completed successfully."
            break
          elif [[ "$STATUS" == "FAILURE" || "$STATUS" == "CANCELLED" ]]; then
            echo "Error: Trigger failed with status $STATUS."
            exit 1
          else
            echo "Waiting for completion..."
            sleep 10
          fi
        done

  # Trigger: 020-check-or-create-project
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: '020-check-or-create-project'
    waitFor: ['010-check-or-create-folder']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Starting trigger: check-or-create-project..."
        BUILD_ID=$(gcloud beta builds triggers run 15257bc8-581a-47f9-b3a5-08f35742553e \
          --project=org-service-account-001 \
          --substitutions=_ENVIRONMENT=${_ENVIRONMENT} --format="value(metadata.build.id)")
        echo "Trigger started. Build ID: $BUILD_ID"
        while true; do
          STATUS=$(gcloud builds describe $BUILD_ID --format="value(status)" --project=org-service-account-001)
          echo "Current status: $STATUS"
          if [[ "$STATUS" == "SUCCESS" ]]; then
            echo "Trigger completed successfully."
            break
          elif [[ "$STATUS" == "FAILURE" || "$STATUS" == "CANCELLED" ]]; then
            echo "Error: Trigger failed with status $STATUS."
            exit 1
          else
            echo "Waiting for completion..."
            sleep 10
          fi
        done

  # Trigger: 030-enable-billing
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: '030-enable-billing'
    waitFor: ['020-check-or-create-project']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Starting trigger: enable-billing..."
        BUILD_ID=$(gcloud beta builds triggers run 782d9876-eb96-4581-bfee-85b1c825fd75 \
          --project=org-service-account-001 \
          --substitutions=_ENVIRONMENT=${_ENVIRONMENT} --format="value(metadata.build.id)")
        echo "Trigger started. Build ID: $BUILD_ID"
        while true; do
          STATUS=$(gcloud builds describe $BUILD_ID --format="value(status)" --project=org-service-account-001)
          echo "Current status: $STATUS"
          if [[ "$STATUS" == "SUCCESS" ]]; then
            echo "Trigger completed successfully."
            break
          elif [[ "$STATUS" == "FAILURE" || "$STATUS" == "CANCELLED" ]]; then
            echo "Error: Trigger failed with status $STATUS."
            exit 1
          else
            echo "Waiting for completion..."
            sleep 10
          fi
        done

  # Trigger: 040-enable-cloud-functions
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: '040-enable-cloud-functions'
    waitFor: ['030-enable-billing']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Starting trigger: enable-cloud-functions..."
        BUILD_ID=$(gcloud beta builds triggers run 93cd455e-fcf8-4b50-9781-32bf6037ba89 \
          --project=org-service-account-001 \
          --substitutions=_ENVIRONMENT=${_ENVIRONMENT} --format="value(metadata.build.id)")
        echo "Trigger started. Build ID: $BUILD_ID"
        while true; do
          STATUS=$(gcloud builds describe $BUILD_ID --format="value(status)" --project=org-service-account-001)
          echo "Current status: $STATUS"
          if [[ "$STATUS" == "SUCCESS" ]]; then
            echo "Trigger completed successfully."
            break
          elif [[ "$STATUS" == "FAILURE" || "$STATUS" == "CANCELLED" ]]; then
            echo "Error: Trigger failed with status $STATUS."
            exit 1
          else
            echo "Waiting for completion..."
            sleep 10
          fi
        done

  # Trigger: 050-add-cloudbuild-iam-policy
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: '050-add-cloudbuild-iam-policy'
    waitFor: ['040-enable-cloud-functions']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Starting trigger: add-cloudbuild-iam-policy..."
        BUILD_ID=$(gcloud beta builds triggers run a8da0b8c-01d5-4c27-958b-7eab3b7ed00f \
          --project=org-service-account-001 \
          --substitutions=_ENVIRONMENT=${_ENVIRONMENT} --format="value(metadata.build.id)")
        echo "Trigger started. Build ID: $BUILD_ID"
        while true; do
          STATUS=$(gcloud builds describe $BUILD_ID --format="value(status)" --project=org-service-account-001)
          echo "Current status: $STATUS"
          if [[ "$STATUS" == "SUCCESS" ]]; then
            echo "Trigger completed successfully."
            break
          elif [[ "$STATUS" == "FAILURE" || "$STATUS" == "CANCELLED" ]]; then
            echo "Error: Trigger failed with status $STATUS."
            exit 1
          else
            echo "Waiting for completion..."
            sleep 10
          fi
        done

  # Trigger: 060-deploy-cloud-function
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: '060-deploy-cloud-function'
    waitFor: ['050-add-cloudbuild-iam-policy']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Starting trigger: deploy-cloud-function..."
        BUILD_ID=$(gcloud beta builds triggers run f6de475f-0bd6-48b0-ae13-687a5f84a03f \
          --project=org-service-account-001 \
          --substitutions=_ENVIRONMENT=${_ENVIRONMENT} --format="value(metadata.build.id)")
        echo "Trigger started. Build ID: $BUILD_ID"
        while true; do
          STATUS=$(gcloud builds describe $BUILD_ID --format="value(status)" --project=org-service-account-001)
          echo "Current status: $STATUS"
          if [[ "$STATUS" == "SUCCESS" ]]; then
            echo "Trigger completed successfully."
            break
          elif [[ "$STATUS" == "FAILURE" || "$STATUS" == "CANCELLED" ]]; then
            echo "Error: Trigger failed with status $STATUS."
            exit 1
          else
            echo "Waiting for completion..."
            sleep 10
          fi
        done

  # Trigger: 070-test-service-check
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: '070-test-service-check'
    waitFor: ['060-deploy-cloud-function']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Starting trigger: test-service-check..."
        BUILD_ID=$(gcloud beta builds triggers run af1d2829-bf23-4125-aa52-373e47001e4a \
          --project=org-service-account-001 \
          --substitutions=_ENVIRONMENT=${_ENVIRONMENT} --format="value(metadata.build.id)")
        echo "Trigger started. Build ID: $BUILD_ID"
        while true; do
          STATUS=$(gcloud builds describe $BUILD_ID --format="value(status)" --project=org-service-account-001)
          echo "Current status: $STATUS"
          if [[ "$STATUS" == "SUCCESS" ]]; then
            echo "Trigger completed successfully."
            break
          elif [[ "$STATUS" == "FAILURE" || "$STATUS" == "CANCELLED" ]]; then
            echo "Error: Trigger failed with status $STATUS."
            exit 1
          else
            echo "Waiting for completion..."
            sleep 10
          fi
        done

timeout: '3600s' # Timeout for the entire build
options:
  logging: CLOUD_LOGGING_ONLY
  substitutionOption: ALLOW_LOOSE

substitutions:
  _ORG_ID: '799174817843'    # Organization ID
  _FOLDER_NAME: 'soccer'     # Parent folder name
  _ENVIRONMENT: 'dev'        # Environment delivered from the trigger
  _BILLING_ACCOUNT_ID: '01A2A3-60053D-6838FA' # Billing account ID

steps:
  # Step 1: Check if the folder exists, retrieve its ID, or create the folder if not found
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e  # Exit immediately if a command fails
        echo "Checking if folder ${_FOLDER_NAME} exists under organization ${_ORG_ID}..."
        gcloud resource-manager folders list \
          --organization="${_ORG_ID}" \
          --filter="displayName=${_FOLDER_NAME}" \
          --format="value(name.basename())" > /workspace/folder_id.txt

        if [ ! -s /workspace/folder_id.txt ]; then
          echo "Folder ${_FOLDER_NAME} not found. Creating folder..."
          gcloud resource-manager folders create \
            --display-name="${_FOLDER_NAME}" \
            --organization="${_ORG_ID}" \
            --format="value(name.basename())" > /workspace/folder_id.txt

          echo "Folder created. ID stored in /workspace/folder_id.txt"
        else
          echo "Folder exists. ID stored in /workspace/folder_id.txt"
        fi

  # Step 2: Check if project exists, retrieve its name or create a new one
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e  # Exit immediately if a command fails
        echo "Checking if project starting with ${_FOLDER_NAME}-${_ENVIRONMENT} exists..."
        gcloud projects list \
          --filter="name~^${_FOLDER_NAME}-${_ENVIRONMENT}" \
          --format="value(projectId)" | head -n 1 > /workspace/project_name.txt

        if [ -s /workspace/project_name.txt ]; then
          echo "Project exists: $(cat /workspace/project_name.txt)"
        else
          echo "Project does not exist. Creating a new project..."
          echo "${_FOLDER_NAME}-${_ENVIRONMENT}-$(date +%s)" > /workspace/project_name.txt
          echo "New project name: $(cat /workspace/project_name.txt)"
        fi

  # Step 3: Read folder ID and project name directly from files and create the project if new
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e  # Exit immediately if a command fails
        if [ ! -f /workspace/folder_id.txt ]; then
          echo "Error: Folder ID file not found."
          exit 1
        fi

        if [ ! -f /workspace/project_name.txt ]; then
          echo "Error: Project name file not found."
          exit 1
        fi

        gcloud projects describe "$(cat /workspace/project_name.txt)" > /dev/null 2>&1 || {
          echo "Creating project: $(cat /workspace/project_name.txt) under folder: $(cat /workspace/folder_id.txt)..."
          gcloud projects create "$(cat /workspace/project_name.txt)" --folder="$(cat /workspace/folder_id.txt)" || {
            echo "Error: Failed to create project"
            exit 1
          }
          echo "Project successfully created."
        }

  # Step 4: Link the project to the billing account
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e  # Exit immediately if a command fails
        if [ ! -f /workspace/project_name.txt ]; then
          echo "Error: Project name file not found."
          exit 1
        fi

        echo "Linking project $(cat /workspace/project_name.txt) to billing account..."

        gcloud beta billing projects link "$(cat /workspace/project_name.txt)" \
            --billing-account="${_BILLING_ACCOUNT_ID}"

        echo "Billing account linked successfully."

  # Step 5: Enable Cloud Functions API
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e  # Exit immediately if a command fails
        if [ ! -f /workspace/project_name.txt ]; then
          echo "Error: Project name file not found."
          exit 1
        fi

        echo "Enabling Cloud Functions API for project: $(cat /workspace/project_name.txt)..."

        # Set the active project
        gcloud config set project "$(cat /workspace/project_name.txt)"

        # Enable the Cloud Functions API
        gcloud services enable cloudfunctions.googleapis.com

        echo "Cloud Functions API enabled successfully."

  # Step 6: Deploy the service-check Cloud Function
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e  # Exit immediately if a command fails
        if [ ! -f /workspace/project_name.txt ]; then
          echo "Error: Project name file not found."
          exit 1
        fi

        echo "Deploying Cloud Function to project: $(cat /workspace/project_name.txt)..."

        # Set the active project
        gcloud config set project "$(cat /workspace/project_name.txt)"

        # Deploy the Cloud Function
        gcloud functions deploy service-check \
            --entry-point=app \
            --runtime=python39 \
            --trigger-http \
            --allow-unauthenticated \
            --region=us-central1 \
            --source=gcp/cloud-functions/service-check

        echo "Cloud Function 'service-check' deployed successfully."

options:
  logging: CLOUD_LOGGING_ONLY

substitutions:
  _ENVIRONMENT: 'dev'                         # Environment delivered from the trigger
  _FOLDER_NAME: 'soccer'                      # Parent folder name

steps:
  # Step 1: Retrieve the project ID
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Checking if project starting with ${_FOLDER_NAME}-${_ENVIRONMENT} exists..."
        gcloud projects list \
          --filter="name~^${_FOLDER_NAME}-${_ENVIRONMENT}" \
          --format="value(projectId)" | head -n 1 > /workspace/SOCCER_PROJECT_ID.txt

        if [ ! -s /workspace/SOCCER_PROJECT_ID.txt ] || [ -z "$(cat /workspace/SOCCER_PROJECT_ID.txt)" ]; then
          echo "Error: Project ID not found. Ensure the project exists."
          exit 1
        fi
        echo "Using project: $(cat /workspace/SOCCER_PROJECT_ID.txt)"

  # Step 2: Enable Firebase in the project
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Enabling Firebase in project $(cat /workspace/SOCCER_PROJECT_ID.txt)..."
        gcloud services enable firebase.googleapis.com --project="$(cat /workspace/SOCCER_PROJECT_ID.txt)"

  # Step 3: Install Firebase CLI in /workspace and Verify
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Installing Firebase CLI..."
        mkdir -p /workspace/bin  # Ensure directory exists
        curl -sL https://firebase.tools | bash -s -- --install-dir /workspace/bin
        chmod +x /workspace/bin/firebase
        echo "Verifying Firebase CLI installation..."
        if ! /workspace/bin/firebase --version; then
          echo "Error: Firebase CLI installation failed."
          exit 1
        fi
        echo "Firebase CLI installed successfully!"

  # Step 4: Prepare Firebase Project Files
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Creating Firebase project directory..."
        rm -rf /workspace/firebase_project
        mkdir -p /workspace/firebase_project
        cd /workspace/firebase_project

        echo "Copying Firebase configuration files..."
        cp /workspace/gcp/cloud-build/firebase.json .
        cp /workspace/gcp/cloud-build/.firebaserc .
        cp /workspace/gcp/cloud-build/firestore.rules .
        cp /workspace/gcp/cloud-build/database.rules.json .
        cp /workspace/gcp/cloud-build/storage.rules .

        # Ensure project ID is updated in .firebaserc
        sed -i "s/SOCCER_PROJECT_ID/$(cat /workspace/SOCCER_PROJECT_ID.txt)/g" .firebaserc

  # Step 5: Initialize Firebase (Using Persistent CLI)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Verifying Firebase CLI before initialization..."
        if ! /workspace/bin/firebase --version; then
          echo "Error: Firebase CLI is not available."
          exit 1
        fi

        cd /workspace/firebase_project
        echo "Initializing Firebase in project $(cat /workspace/SOCCER_PROJECT_ID.txt)..."
        yes | /workspace/bin/firebase init firestore functions storage auth --project="$(cat /workspace/SOCCER_PROJECT_ID.txt)" --non-interactive --force

  # Step 6: Deploy Firebase Configuration (Using Persistent CLI)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Verifying Firebase CLI before deployment..."
        if ! /workspace/bin/firebase --version; then
          echo "Error: Firebase CLI is not available."
          exit 1
        fi

        cd /workspace/firebase_project
        echo "Deploying Firebase configuration to $(cat /workspace/SOCCER_PROJECT_ID.txt)..."
        /workspace/bin/firebase deploy --project="$(cat /workspace/SOCCER_PROJECT_ID.txt)"

options:
  logging: CLOUD_LOGGING_ONLY

substitutions:
  _ENVIRONMENT: 'dev'                         # Environment delivered from the trigger
  _FOLDER_NAME: 'soccer'                      # Parent folder name

steps:
  # Step 1: Retrieve the project ID
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Checking if project starting with ${_FOLDER_NAME}-${_ENVIRONMENT} exists..."
        gcloud projects list \
          --filter="name~^${_FOLDER_NAME}-${_ENVIRONMENT}" \
          --format="value(projectId)" | head -n 1 > /workspace/SOCCER_PROJECT_ID.txt

        if [ ! -s /workspace/SOCCER_PROJECT_ID.txt ] || [ -z "$(cat /workspace/SOCCER_PROJECT_ID.txt)" ]; then
          echo "‚ùå Error: Project ID not found. Ensure the project exists."
          exit 1
        fi
        echo "‚úÖ Using project: $(cat /workspace/SOCCER_PROJECT_ID.txt)"

  # Step 2: Enable Firebase in the project
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "üîì Enabling Firebase in project $(cat /workspace/SOCCER_PROJECT_ID.txt)..."
        gcloud services enable firebase.googleapis.com --project="$(cat /workspace/SOCCER_PROJECT_ID.txt)"

  # Step 3: Register the project with Firebase via API (Handle 409 gracefully)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "üì° Registering project $(cat /workspace/SOCCER_PROJECT_ID.txt) with Firebase..."

        access_token=$(gcloud auth print-access-token)

        response_code=$(curl -s -o response.json -w "%{http_code}" -X POST \
            -H "Authorization: Bearer ${access_token}" \
            -H "Content-Type: application/json" \
            -d '{}' \
            "https://firebase.googleapis.com/v1beta1/projects/$(cat /workspace/SOCCER_PROJECT_ID.txt):addFirebase")

        if [ "$response_code" -eq 200 ]; then
          echo "‚úÖ Firebase project registered successfully!"
        elif [ "$response_code" -eq 409 ]; then
          echo "‚ö†Ô∏è Firebase project already registered. Continuing with deployment..."
        else
          echo "‚ùå Error registering Firebase project. Response code: $response_code"
          cat response.json
          exit 1
        fi

  # Step 4: Install Firebase CLI in a Persistent Directory
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "‚¨áÔ∏è Installing Firebase CLI..."
        
        curl -sL https://firebase.tools | bash

        mkdir -p /workspace/firebase
        cp /usr/local/bin/firebase /workspace/firebase/
        chmod +x /workspace/firebase/firebase

        echo "üîç Verifying Firebase CLI installation..."
        if ! /workspace/firebase/firebase --version; then
          echo "‚ùå Error: Firebase CLI installation failed."
          exit 1
        fi
        echo "‚úÖ Firebase CLI installed successfully!"

  # Step 5: Prepare Firebase Project Files
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "üìÇ Creating Firebase project directory..."
        rm -rf /workspace/firebase_project
        mkdir -p /workspace/firebase_project
        cd /workspace/firebase_project

        echo "üì• Copying Firebase configuration files..."
        cp /workspace/gcp/cloud-build/firebase.json .
        cp /workspace/gcp/cloud-build/.firebaserc .
        cp /workspace/gcp/cloud-build/firestore.rules .
        cp /workspace/gcp/cloud-build/database.rules.json .
        cp /workspace/gcp/cloud-build/storage.rules .

        sed -i "s/SOCCER_PROJECT_ID/$(cat /workspace/SOCCER_PROJECT_ID.txt)/g" .firebaserc
        if ! grep -q "$(cat /workspace/SOCCER_PROJECT_ID.txt)" .firebaserc; then
          echo "‚ùå Error: Project ID substitution failed in .firebaserc"
          exit 1
        fi
        echo "‚úÖ Project ID substitution successful in .firebaserc"

  # Step 6: Initialize Realtime Database if not exists
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "üîç Checking for existing Realtime Database instance..."

        project_id=$(cat /workspace/SOCCER_PROJECT_ID.txt)

        echo "‚öôÔ∏è Enabling Firebase APIs..."
        gcloud services enable firebase.googleapis.com firebasedatabase.googleapis.com --project="$project_id"

        db_url="https://${project_id}.firebaseio.com/.json"
        response=$(curl -s -o /dev/null -w "%{http_code}" "$db_url")

        if [ "$response" -eq 200 ]; then
          echo "‚úÖ Realtime Database already exists. Skipping initialization."
        else
          echo "‚ö†Ô∏è Realtime Database not found. Initializing using Firebase CLI..."

          # Initialize the Realtime Database using Firebase CLI
          cd /workspace/firebase_project
          /workspace/firebase/firebase init database --project="$project_id" --token "$(gcloud auth print-access-token)" --non-interactive

          echo "üöÄ Deploying database rules..."
          /workspace/firebase/firebase deploy --only database --project="$project_id"

          echo "‚úÖ Realtime Database initialized and rules deployed successfully!"
        fi

  # Step 7: Deploy Firebase Configuration Using Shared CLI
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "üöÄ Deploying Firebase configuration to $(cat /workspace/SOCCER_PROJECT_ID.txt)..."

        if ! /workspace/firebase/firebase --version; then
          echo "‚ùå Error: Firebase CLI is not available."
          exit 1
        fi

        cd /workspace/firebase_project
        /workspace/firebase/firebase deploy --project="$(cat /workspace/SOCCER_PROJECT_ID.txt)"
        echo "‚úÖ Firebase configuration deployed successfully!"

options:
  logging: CLOUD_LOGGING_ONLY

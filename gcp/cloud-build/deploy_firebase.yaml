substitutions:
  _ENVIRONMENT: 'dev'
  _FOLDER_NAME: 'soccer'

steps:
  # Step 1: Retrieve the project ID
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Checking if project starting with ${_FOLDER_NAME}-${_ENVIRONMENT} exists..."
        gcloud projects list \
          --filter="name~^${_FOLDER_NAME}-${_ENVIRONMENT}" \
          --format="value(projectId)" | head -n 1 > /workspace/SOCCER_PROJECT_ID.txt

        if [ ! -s /workspace/SOCCER_PROJECT_ID.txt ] || [ -z "$(cat /workspace/SOCCER_PROJECT_ID.txt)" ]; then
          echo "‚ùå Error: Project ID not found. Ensure the project exists."
          exit 1
        fi
        echo "‚úÖ Using project: $(cat /workspace/SOCCER_PROJECT_ID.txt)"

  # Step 2: Enable Firebase APIs in the project
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "üîì Enabling Firebase APIs for project $(cat /workspace/SOCCER_PROJECT_ID.txt)..."
        gcloud services enable firebase.googleapis.com --project="$(cat /workspace/SOCCER_PROJECT_ID.txt)"

  # Step 3: Install Firebase CLI
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "‚¨áÔ∏è Installing Firebase CLI..."
        curl -sL https://firebase.tools | bash
        mkdir -p /workspace/firebase
        cp /usr/local/bin/firebase /workspace/firebase/
        chmod +x /workspace/firebase/firebase
        echo "üîç Verifying Firebase CLI installation..."
        if ! command -v /workspace/firebase/firebase &> /dev/null; then
          echo "‚ùå Firebase CLI installation failed. Exiting."
          exit 1
        fi
        /workspace/firebase/firebase --version
        echo "‚úÖ Firebase CLI installed successfully!"

  # Step 4: List Existing Firebase Projects
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        firebase_project_id=$(cat /workspace/SOCCER_PROJECT_ID.txt)
        echo "üì± Listing existing Firebase projects..."
        /workspace/firebase/firebase projects:list

  # Step 5: Enable Firebase for the Project (if missing)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        set -x  # Enable debugging mode to print each command        
        firebase_project_id=$(cat /workspace/SOCCER_PROJECT_ID.txt)
        echo "üõ†Ô∏è Checking if Firebase is enabled for project: $firebase_project_id..."

        # List Firebase projects and store the result (excluding table headers)
        firebase_projects=$(/workspace/firebase/firebase projects:list | tail -n +2 | awk '{print $2}')

        echo "üîç Firebase projects found:"
        echo "$firebase_projects"

        if echo "$firebase_projects" | grep -q "$firebase_project_id"; then
          echo "‚úÖ Firebase is already enabled for this project."
        else
          echo "üöÄ Enabling Firebase for project $firebase_project_id..."
          /workspace/firebase/firebase projects:addfirebase "$firebase_project_id"
          echo "‚úÖ Firebase has been successfully enabled for $firebase_project_id."
        fi


  # Step 6: Check if Firebase Android App Exists and Create It
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e

        firebase_project_id=$(cat /workspace/SOCCER_PROJECT_ID.txt)
        package_name="piotr_gorczynski.soccer2"
        mkdir -p /workspace/logs
        firebase_log_file="/workspace/logs/firebase-debug.log"

        echo "üì± Checking if Firebase Android App exists for project $firebase_project_id..."
        
        # List all Firebase apps and capture output
        app_list_output=$(/workspace/firebase/firebase apps:list --project="$firebase_project_id")

        # Print raw Firebase apps output for debugging
        echo "üîç Raw Firebase Apps Output:"
        echo "$app_list_output"

        # Extract only Android App IDs correctly
        existing_apps=$(echo "$app_list_output" | grep "ANDROID" | awk -F'‚îÇ' '{print $3}' | tr -d ' ')

        # Print extracted Android app IDs
        echo "üîç Extracted Firebase Android App IDs:"
        echo "$existing_apps"

        # If any Android app exists, assume it is already created
        if [ -n "$existing_apps" ]; then
          echo "‚úÖ Firebase Android App already exists for project: $firebase_project_id. Skipping creation."
          exit 0
        fi

        echo "üì± Creating Firebase Android App for project $firebase_project_id..."
        if ! /workspace/firebase/firebase apps:create android --package-name="$package_name" --project="$firebase_project_id" > "$firebase_log_file" 2>&1; then
          echo "‚ö†Ô∏è Error occurred while creating Android app. Logging details..."
          cat "$firebase_log_file"
          exit 1
        else
          echo "‚úÖ Firebase Android App created successfully!"
        fi

options:
  logging: CLOUD_LOGGING_ONLY

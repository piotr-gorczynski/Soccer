substitutions:
  _ENVIRONMENT: 'dev'
  _FOLDER_NAME: 'soccer'

steps:
  # Step 1: Retrieve the Firebase Project ID
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "üîç Checking if project starting with ${_FOLDER_NAME}-${_ENVIRONMENT} exists..."
        gcloud projects list \
          --filter="name~^${_FOLDER_NAME}-${_ENVIRONMENT}" \
          --format="value(projectId)" | head -n 1 > /workspace/soccer_project_id.txt

        if [ ! -s /workspace/soccer_project_id.txt ] || [ -z "$(cat /workspace/soccer_project_id.txt)" ]; then
          echo "‚ùå Error: Project ID not found. Ensure the project exists."
          exit 1
        fi
        echo "‚úÖ Using project: $(cat /workspace/soccer_project_id.txt)"

  # Step 2: Retrieve the Firebase Project Number (Using Impersonation)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        firebase_project_id=$(cat /workspace/soccer_project_id.txt)

        echo "üî¢ Retrieving project number for $firebase_project_id..."
        firebase_project_number=$(gcloud projects describe "$firebase_project_id" --format="value(projectNumber)")

        if [ -z "$firebase_project_number" ]; then
          echo "‚ùå Error: Could not retrieve project number for $firebase_project_id."
          exit 1
        fi

        echo "$firebase_project_number" > /workspace/firebase_project_number.txt
        echo "‚úÖ Project number retrieved: $firebase_project_number"

  # Step 3: Retrieve the Firebase Web API Key (Using Impersonation)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        set -x  # Enables command echoing for debugging

        firebase_project_id=$(cat /workspace/soccer_project_id.txt)

        echo "üåê Retrieving Firebase Web API Key from project $firebase_project_id using impersonation..."
        api_key_name=$(gcloud services api-keys list \
          --format="value(name)" \
          --project="$firebase_project_id" \
          --impersonate-service-account=firebase-adminsdk-fbsvc@$firebase_project_id.iam.gserviceaccount.com \
          | head -n 1)

        if [ -z "$api_key_name" ]; then
          echo "‚ùå Error: No API keys found in project $firebase_project_id."
          exit 1
        fi

        echo "üîë Found API Key resource name: $api_key_name"

        firebase_api_key=$(gcloud services api-keys get-key-string "$api_key_name" \
          --impersonate-service-account=firebase-adminsdk-fbsvc@$firebase_project_id.iam.gserviceaccount.com \
          --format="value(keyString)")

        if [ -z "$firebase_api_key" ]; then
          echo "‚ùå Error: Could not resolve API key string."
          exit 1
        fi

        echo "$firebase_api_key" > /workspace/firebase_api_key.txt
        echo "‚úÖ Firebase API Key string retrieved successfully!"

  # Step 4: Authenticate as Firebase Admin SDK
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        set -x  # Enables command echoing for debugging

        firebase_project_id=$(cat /workspace/soccer_project_id.txt)

        echo "üîë Generating OAuth 2 access token for Firebase Admin SDK..."
        gcloud auth print-access-token --impersonate-service-account=firebase-adminsdk-fbsvc@$firebase_project_id.iam.gserviceaccount.com > token.txt
        access_token=$(cat token.txt)

  # Step 5: Create Firebase Test User
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        set -x  # Enables command echoing for debugging

        firebase_api_key=$(cat /workspace/firebase_api_key.txt)

        echo "üì© Creating Firebase Test User..."
        response=$(curl -s -o response.json -w "%{http_code}" -X POST "https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${firebase_api_key}" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $access_token" \
          -d '{
                "email": "test@test.test",
                "password": "TestPassowrd123!@",
                "returnSecureToken": true
              }')

        if [[ "$response" -ne 200 ]]; then
          echo "‚ùå Failed to create Firebase user. Response:"
          cat response.json
          exit 1
        fi

        echo "‚úÖ Firebase test user created successfully!"

options:
  logging: CLOUD_LOGGING_ONLY

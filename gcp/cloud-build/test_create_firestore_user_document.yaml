substitutions:
  _ENVIRONMENT: 'dev'
  _FOLDER_NAME: 'soccer'
  _EMAIL: 'test@test.test'
  _NICKNAME: 'testnickname'

steps:
  # Step 1: Retrieve the Firebase Project ID
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        gcloud projects list \
          --filter="name~^${_FOLDER_NAME}-${_ENVIRONMENT}" \
          --format="value(projectId)" | head -n 1 > /workspace/project_id.txt

  # Step 2: Impersonate Firebase Admin SDK to get access token
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        project_id=$(cat /workspace/project_id.txt)
        gcloud auth print-access-token \
          --impersonate-service-account=firebase-adminsdk-fbsvc@$project_id.iam.gserviceaccount.com \
          > /workspace/access_token.txt

  # Step 3: Lookup UID for the given test user email
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        apt-get update && apt-get install -y jq
        project_id=$(cat /workspace/project_id.txt)
        access_token=$(cat /workspace/access_token.txt)

        echo "üîç Looking up user UID for ${_EMAIL}..."
        uid=$(curl -s -X POST "https://identitytoolkit.googleapis.com/v1/accounts:lookup" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $access_token" \
          -d "{\"email\": [\"${_EMAIL}\"]}" | jq -r '.users[0].localId')

        if [ -z "$uid" ] || [ "$uid" == "null" ]; then
          echo "‚ùå Could not find user UID for ${_EMAIL}"
          exit 1
        fi

        echo "$uid" > /workspace/uid.txt
        echo "‚úÖ Found UID: $uid"

  # Step 4: Write nickname into Firestore
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        uid=$(cat /workspace/uid.txt)
        access_token=$(cat /workspace/access_token.txt)
        project_id=$(cat /workspace/project_id.txt)

        echo "üìù Writing nickname to Firestore document users/$uid..."
        curl -s -X PATCH \
          -H "Authorization: Bearer $access_token" \
          -H "Content-Type: application/json" \
          -H "X-Goog-User-Project: $project_id" \
          "https://firestore.googleapis.com/v1/projects/$project_id/databases/(default)/documents/users/$uid?updateMask.fieldPaths=nickname" \
          -d "{
                \"fields\": {
                  \"nickname\": { \"stringValue\": \"${_NICKNAME}\" }
                }
              }"

        echo "‚úÖ Nickname successfully written to Firestore."

options:
  logging: CLOUD_LOGGING_ONLY

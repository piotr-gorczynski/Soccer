substitutions:
  _ENVIRONMENT: 'dev'                      # Environment delivered from the trigger
  _FOLDER_NAME: 'soccer'                   # Parent folder name
  _FUNCTION_NAME: 'service-check'          # Cloud Function name
  _REGION: 'us-central1'                   # Region for deployment
  _RUNTIME: 'python39'                     # Runtime for the Cloud Function
  _SOURCE_PATH: 'gcp/cloud-functions/service-check'  # Source code path for the Cloud Function

steps:
  # Step 1: Retrieve the project ID
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e  # Exit immediately if a command fails
        echo "Checking if project starting with ${_FOLDER_NAME}-${_ENVIRONMENT} exists..."
        gcloud projects list \
          --filter="name~^${_FOLDER_NAME}-${_ENVIRONMENT}" \
          --format="value(projectId)" | head -n 1 > /workspace/project_name.txt

        if [ ! -s /workspace/project_name.txt ] || [ -z "$(cat /workspace/project_name.txt)" ]; then
          echo "Error: Project ID not found. Ensure the project exists."
          exit 1
        fi
        echo "Using project: $(cat /workspace/project_name.txt)"

  # Step 2: Run Unit Tests
  - name: 'python:3.9-slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e  # Exit immediately if a command fails
        echo "Installing dependencies for testing..."
        pip install -r ${_SOURCE_PATH}/requirements.txt
        echo "Running unit tests..."
        python -m unittest discover -s gcp/cloud-functions/tests

  # Step 3: Deploy the Cloud Function
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e  # Exit immediately if a command fails
        echo "Deploying Cloud Function '${_FUNCTION_NAME}' to project: $(cat /workspace/project_name.txt)..."
        gcloud config set project "$(cat /workspace/project_name.txt)"
        gcloud functions deploy ${_FUNCTION_NAME} \
            --entry-point=service_check \
            --runtime=${_RUNTIME} \
            --trigger-http \
            --region=${_REGION} \
            --source=${_SOURCE_PATH} \
            --timeout=540s || {
          echo "Error: Failed to deploy the Cloud Function."
          exit 1
        }
        echo "Cloud Function '${_FUNCTION_NAME}' deployed successfully."

  # Step 4: Add IAM policy binding to allow allUsers to invoke
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: 'bind-invoker-role'
    entrypoint: bash
    args:
      - '-c'
      - |
        set -e
        project_id=$(cat /workspace/project_name.txt)

        echo "Granting invoker role to allUsers for '${_FUNCTION_NAME}'..."
        gcloud functions add-iam-policy-binding ${_FUNCTION_NAME} \
          --region=${_REGION} \
          --project="$project_id" \
          --member="allUsers" \
          --role="roles/cloudfunctions.invoker"

        echo "IAM policy binding applied."

options:
  logging: CLOUD_LOGGING_ONLY

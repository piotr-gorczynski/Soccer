substitutions:
  _ENVIRONMENT: 'dev'
  _FOLDER_NAME: 'soccer'
  _API_KEYS_VIEWER_ROLE: 'roles/serviceusage.apiKeysViewer'

steps:
  # Step 1: Retrieve the Firebase project ID
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "üì¶ Looking for Firebase project starting with ${_FOLDER_NAME}-${_ENVIRONMENT}..."
        gcloud projects list \
          --filter="name~^${_FOLDER_NAME}-${_ENVIRONMENT}" \
          --format="value(projectId)" \
          | head -n 1 > /workspace/FIREBASE_PROJECT_ID.txt

        if [ ! -s /workspace/FIREBASE_PROJECT_ID.txt ]; then
          echo "‚ùå Error: Firebase project ID not found."
          exit 1
        fi

        echo "‚úÖ Found Firebase project: $(cat /workspace/FIREBASE_PROJECT_ID.txt)"

  # Step 2: Grant the API Keys Viewer role to the firebase-adminsdk service account
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e

        firebase_project_id=$(cat /workspace/FIREBASE_PROJECT_ID.txt)
        firebase_admin_sa="firebase-adminsdk-fbsvc@${firebase_project_id}.iam.gserviceaccount.com"

        echo "üîê Granting ${_API_KEYS_VIEWER_ROLE} to ${firebase_admin_sa} in project ${firebase_project_id}..."

        gcloud projects add-iam-policy-binding "$firebase_project_id" \
          --member="serviceAccount:${firebase_admin_sa}" \
          --role="${_API_KEYS_VIEWER_ROLE}" || {
          echo "‚ùå Error: Failed to grant API Keys Viewer role."
          exit 1
        }

        echo "‚úÖ Role granted successfully to Firebase Admin SDK service account."

options:
  logging: CLOUD_LOGGING_ONLY

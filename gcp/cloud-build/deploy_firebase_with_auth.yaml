substitutions:
  _ENVIRONMENT: 'dev'
  _FOLDER_NAME: 'soccer'

steps:
  # Step 0: Retrieve the Firebase project ID
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: bash
    args:
      - '-c'
      - |
        set -e
        echo "üì¶ Looking for Firebase project starting with ${_FOLDER_NAME}-${_ENVIRONMENT}..."
        gcloud projects list \
          --filter="name~^${_FOLDER_NAME}-${_ENVIRONMENT}" \
          --format="value(projectId)" \
          | head -n 1 > /workspace/SOCCER_PROJECT_ID.txt

        if [ ! -s /workspace/SOCCER_PROJECT_ID.txt ]; then
          echo "‚ùå Firebase project not found."
          exit 1
        fi

        echo "‚úÖ Found Firebase project: $(cat /workspace/SOCCER_PROJECT_ID.txt)"

  # Step 1: Generate an access token
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: bash
    args:
      - '-c'
      - |
        set -e
        access_token=$(gcloud auth print-access-token)
        echo "$access_token" > /workspace/access_token.txt
        echo "üîë Access token generated and stored."

  # Step 2: Initialize Identity Platform (create the Auth config)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: bash
    args:
      - '-c'
      - |
        set -e
        firebase_project_id=$(cat /workspace/SOCCER_PROJECT_ID.txt)
        access_token=$(cat /workspace/access_token.txt)

        echo "üöÄ Initializing Identity Platform for project: $firebase_project_id..."
        response=$(curl -s -w '\n%{http_code}' -X POST \
          -H "Authorization: Bearer $access_token" \
          -H "Content-Type: application/json" \
          -H "X-Goog-User-Project: $firebase_project_id" \
          "https://identitytoolkit.googleapis.com/v2/projects/$firebase_project_id/identityPlatform:initializeAuth")

        http_code=$(echo "$response" | tail -n1)
        body=$(echo "$response" | head -n-1)

        if [[ "$http_code" == "200" ]]; then
          echo "‚úÖ Identity Platform initialized."
        elif echo "$body" | grep -q "Identity Platform has already been enabled for this project."; then
          echo "‚úÖ Identity Platform is already enabled. Skipping."
        else
          echo "‚ùå Failed to initialize Identity Platform. Response code: $http_code"
          echo "Response body:"
          echo "$body"
          exit 1
        fi

  # Step 3: Enable Email/Password Auth
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: bash
    args:
      - '-c'
      - |
        set -e
        firebase_project_id=$(cat /workspace/SOCCER_PROJECT_ID.txt)
        access_token=$(cat /workspace/access_token.txt)

        echo "üîë Attempting to enable Email/Password authentication..."
        patch_response=$(curl -s -w '\n%{http_code}' -X PATCH \
          -H "Authorization: Bearer $access_token" \
          -H "X-Goog-User-Project: $firebase_project_id" \
          -H "Content-Type: application/json" \
          "https://identitytoolkit.googleapis.com/admin/v2/projects/$firebase_project_id/config?updateMask=signIn.email" \
          -d '{
            "signIn": {
              "email": {
                "enabled": true,
                "passwordRequired": true
              }
            }
          }')

        patch_code=$(echo "$patch_response" | tail -n1)
        patch_body=$(echo "$patch_response" | head -n-1)

        if [[ "$patch_code" == "200" ]]; then
          echo "‚úÖ Email/Password sign-in successfully enabled."
          echo "$patch_body"
        else
          echo "‚ùå Failed to enable Email/Password authentication. HTTP $patch_code"
          echo "Response body:"
          echo "$patch_body"
          exit 1
        fi

  # Step 4: Enable the Google IdP
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: bash
    args:
      - -c
      - |
        set -e
        firebase_project_id=$(cat /workspace/SOCCER_PROJECT_ID.txt)
        access_token=$(cat /workspace/access_token.txt)

        provider="google.com"
        echo "‚öôÔ∏è  Enabling $provider ‚Ä¶"

        # 1Ô∏è‚É£ Try to PATCH the existing config
        patch_resp=$(curl -s -w '\n%{http_code}' -X PATCH \
          -H "Authorization: Bearer $access_token" \
          -H "X-Goog-User-Project: $firebase_project_id" \
          -H "Content-Type: application/json" \
          "https://identitytoolkit.googleapis.com/admin/v2/projects/${firebase_project_id}/defaultSupportedIdpConfigs/${provider}?updateMask=enabled" \
          -d '{"enabled": true}' || true)

        patch_code=$(echo "$patch_resp" | tail -n1)

        if [[ "$patch_code" == "200" ]]; then
          echo "‚úÖ $provider provider enabled."
          exit 0
        fi

        if [[ "$patch_code" != "404" ]]; then
          echo "‚ùå PATCH failed (HTTP $patch_code) ‚Äì aborting."
          echo "$patch_resp"
          exit 1
        fi

        # 2Ô∏è‚É£ If the config doesn‚Äôt exist, POST to create it
        echo "‚ÑπÔ∏è  Config not found ‚Äì creating it."
        create_resp=$(curl -s -w '\n%{http_code}' -X POST \
          -H "Authorization: Bearer $access_token" \
          -H "X-Goog-User-Project: $firebase_project_id" \
          -H "Content-Type: application/json" \
          "https://identitytoolkit.googleapis.com/admin/v2/projects/${firebase_project_id}/defaultSupportedIdpConfigs?idpId=${provider}" \
          -d '{"enabled": true}' || true)

        create_code=$(echo "$create_resp" | tail -n1)

        if [[ "$create_code" == "200" || "$create_code" == "409" ]]; then
          echo "‚úÖ $provider provider is now ready."
        else
          echo "‚ùå Failed to create $provider (HTTP $create_code)"
          echo "$create_resp"
          exit 1
        fi


options:
  logging: CLOUD_LOGGING_ONLY

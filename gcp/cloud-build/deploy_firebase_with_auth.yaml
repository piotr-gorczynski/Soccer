substitutions:
  _ENVIRONMENT: 'dev'
  _FOLDER_NAME: 'soccer'

steps:
  # Step 1: Retrieve the project ID
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        set -x
        echo "üîç Checking if project starting with ${_FOLDER_NAME}-${_ENVIRONMENT} exists..."
        gcloud projects list \
          --filter="name~^${_FOLDER_NAME}-${_ENVIRONMENT}" \
          --format="value(projectId)" | head -n 1 > /workspace/SOCCER_PROJECT_ID.txt

        if [ ! -s /workspace/SOCCER_PROJECT_ID.txt ] || [ -z "$(cat /workspace/SOCCER_PROJECT_ID.txt)" ]; then
          echo "‚ùå Error: Project ID not found. Ensure the project exists."
          exit 1
        fi
        echo "‚úÖ Using project: $(cat /workspace/SOCCER_PROJECT_ID.txt)"

  # Step 2: Enable Firebase API (with check)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        set -x
        firebase_project_id=$(cat /workspace/SOCCER_PROJECT_ID.txt)
        echo "üîì Enabling Firebase API for project $firebase_project_id..."
        if gcloud services enable firebase.googleapis.com --project="$firebase_project_id"; then
          echo "‚úÖ Firebase API enabled."
        else
          echo "‚ùå Failed to enable Firebase API."
          exit 1
        fi

  # Step 3: Enable Identity Toolkit API (with check)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        set -x
        firebase_project_id=$(cat /workspace/SOCCER_PROJECT_ID.txt)
        echo "üîì Enabling Identity Toolkit API for project $firebase_project_id..."
        if gcloud services enable identitytoolkit.googleapis.com --project="$firebase_project_id"; then
          echo "‚úÖ Identity Toolkit API enabled."
        else
          echo "‚ùå Failed to enable Identity Toolkit API."
          exit 1
        fi

  # Step 4: Register project with Firebase
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        set -x
        firebase_project_id=$(cat /workspace/SOCCER_PROJECT_ID.txt)
        access_token=$(gcloud auth print-access-token)
        echo "$access_token" > /workspace/access_token.txt

        echo "üöÄ Registering Firebase services for $firebase_project_id..."
        response=$(curl -s -w "\n%{http_code}" -X POST \
          -H "Authorization: Bearer $access_token" \
          -H "Content-Type: application/json" \
          -d '{}' \
          "https://firebase.googleapis.com/v1beta1/projects/$firebase_project_id:addFirebase")

        http_code=$(echo "$response" | tail -n1)
        if [[ "$http_code" == "200" || "$http_code" == "409" ]]; then
          echo "‚úÖ Firebase project registered (or already exists)."
        else
          echo "‚ùå Failed to register Firebase project (status $http_code)."
          echo "$response"
          exit 1
        fi

  # Step 5: Try enabling Email/Password Auth ‚Äî fallback if backend not ready
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        set -x
        firebase_project_id=$(cat /workspace/SOCCER_PROJECT_ID.txt)
        access_token=$(cat /workspace/access_token.txt)

        echo "üîë Attempting to enable Email/Password auth..."
        response=$(curl -s -w "\n%{http_code}" -X PATCH \
          -H "Authorization: Bearer $access_token" \
          -H "Content-Type: application/json" \
          -d '{"signIn": {"email": {"enabled": true}}}' \
          "https://identitytoolkit.googleapis.com/v2/projects/$firebase_project_id/config")

        http_code=$(echo "$response" | tail -n1)
        body=$(echo "$response" | head -n-1)

        if [ "$http_code" = "200" ]; then
          echo "‚úÖ Email/Password authentication enabled."
        elif echo "$body" | grep -q "CONFIGURATION_NOT_FOUND"; then
          echo "‚ö†Ô∏è Auth config not initialized. Creating dummy user to trigger backend setup..."

          api_key=$(gcloud services api-keys list \
            --project="$firebase_project_id" \
            --format="value(name)" | head -n1)

          key_string=$(gcloud services api-keys get-key-string "$api_key" \
            --project="$firebase_project_id" \
            --format="value(keyString)")

          dummy_response=$(curl -s -w "\n%{http_code}" -X POST \
            -H "Content-Type: application/json" \
            -d '{
              "email": "dummy-init-user@init.test",
              "password": "InitPass123!",
              "returnSecureToken": true
            }' \
            "https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=$key_string")

          dummy_code=$(echo "$dummy_response" | tail -n1)
          if [ "$dummy_code" != "200" ]; then
            echo "‚ùå Failed to create dummy user to initialize Firebase Auth."
            echo "$dummy_response"
            exit 1
          fi

          echo "‚úÖ Dummy user created. Retrying Email/Password enable..."

          retry_response=$(curl -s -w "\n%{http_code}" -X PATCH \
            -H "Authorization: Bearer $access_token" \
            -H "Content-Type: application/json" \
            -d '{"signIn": {"email": {"enabled": true}}}' \
            "https://identitytoolkit.googleapis.com/v2/projects/$firebase_project_id/config")

          retry_code=$(echo "$retry_response" | tail -n1)
          if [ "$retry_code" = "200" ]; then
            echo "‚úÖ Email/Password authentication enabled after fallback!"
          else
            echo "‚ùå Retry failed."
            echo "$retry_response"
            exit 1
          fi
        else
          echo "‚ùå Unexpected error while enabling Email/Password auth."
          echo "$response"
          exit 1
        fi

options:
  logging: CLOUD_LOGGING_ONLY

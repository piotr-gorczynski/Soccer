steps:
  # STEP 0: Get the Firebase project ID from gcloud
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    entrypoint: bash
    args:
      - -c
      - |
        set -e
        set -x
        echo "üì¶ Looking for Firebase project starting with soccer-dev..."
        firebase_project_id=$(gcloud projects list --filter="name~^soccer-dev" --format="value(projectId)" | head -n 1)
        echo "$firebase_project_id" > /workspace/SOCCER_PROJECT_ID.txt
        echo "‚úÖ Found Firebase project: $firebase_project_id"

  # STEP 1: Get an access token
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    entrypoint: bash
    args:
      - -c
      - |
        set -e
        set -x
        access_token=$(gcloud auth print-access-token)
        echo "$access_token" > /workspace/access_token.txt
        echo "ü™ô Access token generated"

  # STEP 2: Enable Email/Password authentication (with fallback logic)
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    entrypoint: bash
    args:
      - -c
      - |
        set -e
        set -x
        firebase_project_id=$(cat /workspace/SOCCER_PROJECT_ID.txt)
        access_token=$(cat /workspace/access_token.txt)

        echo "üîë Attempting to enable Email/Password auth..."
        response=$(curl -s -w '\n%{http_code}' -X PATCH \
          -H "Authorization: Bearer $access_token" \
          -H "Content-Type: application/json" \
          -d '{"signIn": {"email": {"enabled": true}}}' \
          "https://identitytoolkit.googleapis.com/v2/projects/$firebase_project_id/config")

        http_code=$(echo "$response" | tail -n1)
        body=$(echo "$response" | head -n-1)

        if [[ "$http_code" == "200" ]]; then
          echo "‚úÖ Email/Password authentication enabled."
        elif echo "$body" | grep -q "CONFIGURATION_NOT_FOUND"; then
          echo "‚ö†Ô∏è Auth config not initialized. Creating dummy user to trigger backend setup..."
          gcloud config set project "$firebase_project_id"

          echo "üîç Verifying that apikeys.googleapis.com is enabled..."
          if ! gcloud services list --enabled | grep -q apikeys.googleapis.com; then
            echo "‚ùå apikeys.googleapis.com is not enabled. Please run enable_firebase_apis.yaml first."
            exit 1
          fi

          # ‚úÖ PATCH: ensure correct project scope before API key lookup
          gcloud config set project "$firebase_project_id"

          api_key=$(gcloud services api-keys list --format="value(name)" | head -n 1)
          if [ -z "$api_key" ]; then
            echo "‚ùå No API key found to trigger backend."
            exit 1
          fi

          key_string=$(gcloud services api-keys get-key-string "$api_key" --format="value(keyString)")
          if [ -z "$key_string" ]; then
            echo "‚ùå Could not get key string."
            exit 1
          fi

          echo "üì© Creating dummy Firebase user..."
          create_response=$(curl -s -w '\n%{http_code}' -X POST \
            -H "Content-Type: application/json" \
            "https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=$key_string" \
            -d '{"email": "dummy@dummy.dummy", "password": "DummyPass123!", "returnSecureToken": true}')

          create_code=$(echo "$create_response" | tail -n1)
          if [[ "$create_code" != "200" ]]; then
            echo "‚ùå Failed to create dummy user. Response: $create_response"
            exit 1
          fi

          echo "üîÅ Retrying enabling Email/Password auth..."
          retry_response=$(curl -s -w '\n%{http_code}' -X PATCH \
            -H "Authorization: Bearer $access_token" \
            -H "Content-Type: application/json" \
            -d '{"signIn": {"email": {"enabled": true}}}' \
            "https://identitytoolkit.googleapis.com/v2/projects/$firebase_project_id/config")

          retry_code=$(echo "$retry_response" | tail -n1)
          if [[ "$retry_code" == "200" ]]; then
            echo "‚úÖ Email/Password authentication enabled after retry."
          else
            echo "‚ùå Retry failed. Response: $retry_response"
            exit 1
          fi
        else
          echo "‚ùå Failed to enable Email/Password authentication. Response:"
          echo "$body"
          exit 1
        fi

options:
  logging: CLOUD_LOGGING_ONLY

steps:
  # Step 0: Determine the Firebase project
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    entrypoint: bash
    args:
      - -c
      - |
        set -x
        echo "üîç Checking if project starting with soccer-dev exists..."
        gcloud projects list --filter="name~^soccer-dev" --format="value(projectId)" | head -n 1 > /workspace/SOCCER_PROJECT_ID.txt
        if [ ! -s /workspace/SOCCER_PROJECT_ID.txt ]; then
          echo "‚ùå No matching project found."
          exit 1
        fi
        firebase_project_id=$(cat /workspace/SOCCER_PROJECT_ID.txt)
        echo "‚úÖ Using project: $firebase_project_id"

  # Step 1: Register Firebase services
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    entrypoint: bash
    args:
      - -c
      - |
        set -x
        firebase_project_id=$(cat /workspace/SOCCER_PROJECT_ID.txt)
        access_token=$(gcloud auth print-access-token)
        echo "$access_token" > /workspace/access_token.txt

        echo "üöÄ Registering Firebase services for $firebase_project_id..."
        response=$(curl -s -w '\n%{http_code}' -X POST \
          -H "Authorization: Bearer $access_token" \
          -H "Content-Type: application/json" \
          -d '{}' \
          "https://firebase.googleapis.com/v1beta1/projects/${firebase_project_id}:addFirebase")

        http_code=$(echo "$response" | tail -n1)
        if [[ "$http_code" == "200" ]]; then
          echo "‚úÖ Firebase project registered."
        elif [[ "$http_code" == "409" ]]; then
          echo "‚úÖ Firebase project registered (or already exists)."
        else
          echo "‚ùå Firebase registration failed: $response"
          exit 1
        fi

  # Step 2: Enable Email/Password sign-in method (with fallback)
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    entrypoint: bash
    args:
      - -c
      - |
        set -x
        firebase_project_id=$(cat /workspace/SOCCER_PROJECT_ID.txt)
        access_token=$(cat /workspace/access_token.txt)

        echo "üîë Attempting to enable Email/Password auth..."
        response=$(curl -s -w '\n%{http_code}' -X PATCH \
          -H "Authorization: Bearer $access_token" \
          -H "Content-Type: application/json" \
          -d '{"signIn": {"email": {"enabled": true}}}' \
          "https://identitytoolkit.googleapis.com/v2/projects/${firebase_project_id}/config")

        http_code=$(echo "$response" | tail -n1)
        body=$(echo "$response" | head -n-1)

        if [ "$http_code" = "200" ]; then
          echo "‚úÖ Email/Password authentication enabled."
        elif echo "$body" | grep -q CONFIGURATION_NOT_FOUND; then
          echo "‚ö†Ô∏è Auth config not initialized. Creating dummy user to trigger backend setup..."

          gcloud config set project "$firebase_project_id"

          api_key=$(gcloud services api-keys list --format="value(name)" | head -n 1)
          if [ -z "$api_key" ]; then
            echo "‚ùå No API key found to trigger backend."
            exit 1
          fi

          key_string=$(gcloud services api-keys get-key-string "$api_key" --format="value(keyString)")
          if [ -z "$key_string" ]; then
            echo "‚ùå Could not get key string."
            exit 1
          fi

          curl -s -o /dev/null -X POST \
            -H "Content-Type: application/json" \
            "https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=$key_string" \
            -d '{"email": "dummy@dummy.dummy", "password": "DummyPass123!", "returnSecureToken": true}'

          echo "üîÅ Retrying enabling Email/Password auth..."
          sleep 5
          response=$(curl -s -w '\n%{http_code}' -X PATCH \
            -H "Authorization: Bearer $access_token" \
            -H "Content-Type: application/json" \
            -d '{"signIn": {"email": {"enabled": true}}}' \
            "https://identitytoolkit.googleapis.com/v2/projects/${firebase_project_id}/config")

          http_code=$(echo "$response" | tail -n1)
          if [ "$http_code" = "200" ]; then
            echo "‚úÖ Email/Password authentication enabled after retry."
          else
            echo "‚ùå Failed even after retry. Response:"
            echo "$response"
            exit 1
          fi
        else
          echo "‚ùå Unexpected error: $body"
          exit 1
        fi

options:
  logging: CLOUD_LOGGING_ONLY

substitutions:
  _ENVIRONMENT: 'dev'
  _FOLDER_NAME: 'soccer'

steps:
  # Step 0: Retrieve the Firebase project ID
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: bash
    args:
      - '-c'
      - |
        set -e
        echo "📦 Looking for Firebase project starting with ${_FOLDER_NAME}-${_ENVIRONMENT}..."
        gcloud projects list \
          --filter="name~^${_FOLDER_NAME}-${_ENVIRONMENT}" \
          --format="value(projectId)" \
          | head -n 1 > /workspace/SOCCER_PROJECT_ID.txt

        if [ ! -s /workspace/SOCCER_PROJECT_ID.txt ]; then
          echo "❌ Firebase project not found."
          exit 1
        fi

        echo "✅ Found Firebase project: $(cat /workspace/SOCCER_PROJECT_ID.txt)"

  # Step 1: Generate an access token
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: bash
    args:
      - '-c'
      - |
        set -e
        access_token=$(gcloud auth print-access-token)
        echo "$access_token" > /workspace/access_token.txt
        echo "🔑 Access token generated and stored."

  # Step 2: Initialize Identity Platform (create the Auth config)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: bash
    args:
      - '-c'
      - |
        set -e
        firebase_project_id=$(cat /workspace/SOCCER_PROJECT_ID.txt)
        access_token=$(cat /workspace/access_token.txt)

        echo "🚀 Initializing Identity Platform for project: $firebase_project_id..."
        response=$(curl -s -w '\n%{http_code}' -X POST \
          -H "Authorization: Bearer $access_token" \
          -H "Content-Type: application/json" \
          -H "X-Goog-User-Project: $firebase_project_id" \
          "https://identitytoolkit.googleapis.com/v2/projects/$firebase_project_id/identityPlatform:initializeAuth")

        http_code=$(echo "$response" | tail -n1)
        body=$(echo "$response" | head -n-1)

        if [[ "$http_code" == "200" ]]; then
          echo "✅ Identity Platform initialized."
        elif echo "$body" | grep -q "Identity Platform has already been enabled for this project."; then
          echo "✅ Identity Platform is already enabled. Skipping."
        else
          echo "❌ Failed to initialize Identity Platform. Response code: $http_code"
          echo "Response body:"
          echo "$body"
          exit 1
        fi

  # Step 3: Enable Email/Password Auth
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: bash
    args:
      - '-c'
      - |
        set -e
        firebase_project_id=$(cat /workspace/SOCCER_PROJECT_ID.txt)
        access_token=$(cat /workspace/access_token.txt)

        echo "🔑 Attempting to enable Email/Password authentication..."
        patch_response=$(curl -s -w '\n%{http_code}' -X PATCH \
          -H "Authorization: Bearer $access_token" \
          -H "X-Goog-User-Project: $firebase_project_id" \
          -H "Content-Type: application/json" \
          "https://identitytoolkit.googleapis.com/admin/v2/projects/$firebase_project_id/config?updateMask=signIn.email" \
          -d '{
            "signIn": {
              "email": {
                "enabled": true,
                "passwordRequired": true
              }
            }
          }')

        patch_code=$(echo "$patch_response" | tail -n1)
        patch_body=$(echo "$patch_response" | head -n-1)

        if [[ "$patch_code" == "200" ]]; then
          echo "✅ Email/Password sign-in successfully enabled."
          echo "$patch_body"
        else
          echo "❌ Failed to enable Email/Password authentication. HTTP $patch_code"
          echo "Response body:"
          echo "$patch_body"
          exit 1
        fi

  # Step 4: Ensure Google IdP config exists and is enabled (auto-detect client ID)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: 'enable-google-idp'
    entrypoint: bash
    args:
      - -c
      - |
        set -e
        set -x

        firebase_project_id=$(cat /workspace/SOCCER_PROJECT_ID.txt)
        access_token=$(cat /workspace/access_token.txt)

        # ── 1. Install Firebase CLI exactly like Step 2 ────────────────────────────
        curl -sL https://firebase.tools | bash
        mkdir -p /workspace/firebase
        cp /usr/local/bin/firebase /workspace/firebase/
        chmod +x /workspace/firebase/firebase

        # ── 2. Get first Android app ID ───────────────────────────────────────────
        android_app_id=$(/workspace/firebase/firebase apps:list \
          --project "$firebase_project_id" --json | python - <<'PY'
        import sys, json
        apps=json.load(sys.stdin)["result"]
        print(next(a["appId"] for a in apps if a["platform"]=="ANDROID"), end="")
        PY
        )
        if [[ -z "$android_app_id" ]]; then
          echo "❌ No Android app found in project; cannot derive web client ID."
          exit 1
        fi

        # ── 3. Download google-services.json & extract web client_id ─────────────
        /workspace/firebase/firebase apps:sdkconfig android "$android_app_id" \
          --project "$firebase_project_id" >/tmp/gs.json

        client_id=$(python - <<'PY'
        import json, sys
        d=json.load(open("/tmp/gs.json"))
        for c in d.get("client", []):
            for o in c.get("oauth_client", []):
                if o.get("client_type") == 3:          # 3 ⇒ Web client
                    print(o["client_id"]); sys.exit(0)
        PY
        )
        if [[ -z "$client_id" ]]; then
          echo "❌ Web client_id not found in google-services.json."
          exit 1
        fi
        echo "🔑 Using OAuth client_id: $client_id"

        # ── 4. PATCH first; if 404 then POST to create ───────────────────────────
        provider="google.com"

        patch_code=$(curl -s -o /dev/null -w "%{http_code}" -X PATCH \
          -H "Authorization: Bearer $access_token" \
          -H "X-Goog-User-Project: $firebase_project_id" \
          -H "Content-Type: application/json" \
          "https://identitytoolkit.googleapis.com/admin/v2/projects/${firebase_project_id}/defaultSupportedIdpConfigs/${provider}?updateMask=enabled,clientId" \
          -d "{\"enabled\": true, \"clientId\": \"${client_id}\"}" || true)

        if [[ "$patch_code" == "200" ]]; then
          echo "✅ Google IdP updated."
          exit 0
        fi

        if [[ "$patch_code" != "404" ]]; then
          echo "❌ PATCH failed (HTTP $patch_code)"
          exit 1
        fi

        echo "ℹ️  Config not found – creating it."
        create_code=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
          -H "Authorization: Bearer $access_token" \
          -H "X-Goog-User-Project: $firebase_project_id" \
          -H "Content-Type: application/json" \
          "https://identitytoolkit.googleapis.com/admin/v2/projects/${firebase_project_id}/defaultSupportedIdpConfigs?idpId=${provider}" \
          -d "{\"enabled\": true, \"clientId\": \"${client_id}\"}" || true)

        if [[ "$create_code" == "200" || "$create_code" == "409" ]]; then
          echo "✅ Google IdP ready."
        else
          echo "❌ Failed to create Google IdP (HTTP $create_code)"
          exit 1
        fi



options:
  logging: CLOUD_LOGGING_ONLY

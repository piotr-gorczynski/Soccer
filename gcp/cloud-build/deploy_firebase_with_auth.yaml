substitutions:
  _ENVIRONMENT: 'dev'
  _FOLDER_NAME: 'soccer'

steps:
  # Step 0: Retrieve the Firebase project ID
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: bash
    args:
      - '-c'
      - |
        set -e
        echo "üì¶ Looking for Firebase project starting with ${_FOLDER_NAME}-${_ENVIRONMENT}..."
        gcloud projects list \
          --filter="name~^${_FOLDER_NAME}-${_ENVIRONMENT}" \
          --format="value(projectId)" | head -n 1 > /workspace/SOCCER_PROJECT_ID.txt

        if [ ! -s /workspace/SOCCER_PROJECT_ID.txt ]; then
          echo "‚ùå Firebase project not found."
          exit 1
        fi

        echo "‚úÖ Found Firebase project: $(cat /workspace/SOCCER_PROJECT_ID.txt)"

  # Step 1: Generate access token
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: bash
    args:
      - '-c'
      - |
        set -e
        access_token=$(gcloud auth print-access-token)
        echo "$access_token" > /workspace/access_token.txt
        echo "ü™ô Access token generated"

  # Step 2: Attempt to enable Email/Password Auth
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: bash
    args:
      - '-c'
      - |
        set -e
        firebase_project_id=$(cat /workspace/SOCCER_PROJECT_ID.txt)
        access_token=$(cat /workspace/access_token.txt)
        firebase_admin_sa="firebase-adminsdk-fbsvc@$firebase_project_id.iam.gserviceaccount.com"

        echo "üîë Attempting to enable Email/Password auth..."
        response=$(curl -s -w '\n%{http_code}' -X PATCH \
          -H "Authorization: Bearer $access_token" \
          -H "Content-Type: application/json" \
          -d '{"signIn": {"email": {"enabled": true}}}' \
          "https://identitytoolkit.googleapis.com/v2/projects/$firebase_project_id/config")

        http_code=$(echo "$response" | tail -n1)
        body=$(echo "$response" | head -n-1)

        if [[ "$http_code" == "200" ]]; then
          echo "‚úÖ Email/Password auth enabled."
          exit 0
        fi

        if echo "$body" | grep -q CONFIGURATION_NOT_FOUND; then
          echo "‚ö†Ô∏è Auth config not initialized. Creating dummy user to trigger backend setup..."
          gcloud config set project "$firebase_project_id"

          echo "üîç Retrieving existing API key..."
          api_key_name=$(gcloud services api-keys list \
            --format="value(name)" \
            --impersonate-service-account="$firebase_admin_sa" \
            | head -n 1)

          if [ -z "$api_key_name" ]; then
            echo "‚ùå No API key found in project $firebase_project_id."
            exit 1
          fi

          echo "üîë Found API Key resource name: $api_key_name"
          key_string=$(gcloud services api-keys get-key-string "$api_key_name" \
            --impersonate-service-account="$firebase_admin_sa" \
            --format="value(keyString)")

          if [ -z "$key_string" ]; then
            echo "‚ùå Could not retrieve API key string."
            exit 1
          fi

          echo "üì© Creating dummy Firebase user..."
          create_response=$(curl -s -w '\n%{http_code}' -X POST \
            -H "Content-Type: application/json" \
            "https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=$key_string" \
            -d '{"email": "dummy@dummy.dummy", "password": "DummyPass123!", "returnSecureToken": true}')

          create_code=$(echo "$create_response" | tail -n1)
          if [[ "$create_code" != "200" ]]; then
            echo "‚ùå Failed to create dummy user. Response:"
            echo "$create_response"
            exit 1
          fi

          echo "üîÅ Retrying enabling Email/Password auth..."
          retry_response=$(curl -s -w '\n%{http_code}' -X PATCH \
            -H "Authorization: Bearer $access_token" \
            -H "Content-Type: application/json" \
            -d '{"signIn": {"email": {"enabled": true}}}' \
            "https://identitytoolkit.googleapis.com/v2/projects/$firebase_project_id/config")

          retry_code=$(echo "$retry_response" | tail -n1)
          if [[ "$retry_code" == "200" ]]; then
            echo "‚úÖ Email/Password authentication enabled after retry."
          else
            echo "‚ùå Retry failed. Response:"
            echo "$retry_response"
            exit 1
          fi
        else
          echo "‚ùå Failed to enable Email/Password authentication. Response:"
          echo "$body"
          exit 1
        fi

options:
  logging: CLOUD_LOGGING_ONLY

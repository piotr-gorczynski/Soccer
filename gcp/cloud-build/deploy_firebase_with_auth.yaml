substitutions:
  _ENVIRONMENT: 'dev'
  _FOLDER_NAME: 'soccer'

steps:
  # Step 0: Retrieve the Firebase project ID
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: bash
    args:
      - '-c'
      - |
        set -e
        echo "üì¶ Looking for Firebase project starting with ${_FOLDER_NAME}-${_ENVIRONMENT}..."
        gcloud projects list \
          --filter="name~^${_FOLDER_NAME}-${_ENVIRONMENT}" \
          --format="value(projectId)" | head -n 1 > /workspace/SOCCER_PROJECT_ID.txt

        if [ ! -s /workspace/SOCCER_PROJECT_ID.txt ]; then
          echo "‚ùå Firebase project not found."
          exit 1
        fi

        echo "‚úÖ Found Firebase project: $(cat /workspace/SOCCER_PROJECT_ID.txt)"

  # Step 1: Generate access token
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: bash
    args:
      - '-c'
      - |
        set -e
        access_token=$(gcloud auth print-access-token)
        echo "$access_token" > /workspace/access_token.txt
        echo "ü™ô Access token generated"

  # Step 2: Attempt to enable Email/Password Auth (with fallback using projects/config)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: bash
    args:
      - '-c'
      - |
        set -e
        firebase_project_id=$(cat /workspace/SOCCER_PROJECT_ID.txt)
        access_token=$(cat /workspace/access_token.txt)
        firebase_admin_sa="firebase-adminsdk-fbsvc@$firebase_project_id.iam.gserviceaccount.com"

        echo "üîë Attempting to enable Email/Password auth (primary method)..."
        response=$(curl -s -w '\n%{http_code}' -X PATCH \
          -H "Authorization: Bearer $access_token" \
          -H "Content-Type: application/json" \
          -d '{"signIn": {"email": {"enabled": true}}}' \
          "https://identitytoolkit.googleapis.com/v2/projects/$firebase_project_id/config")

        http_code=$(echo "$response" | tail -n1)
        body=$(echo "$response" | head -n-1)

        if [[ "$http_code" == "200" ]]; then
          echo "‚úÖ Email/Password auth enabled."
          exit 0
        fi

        if echo "$body" | grep -q CONFIGURATION_NOT_FOUND; then
          echo "‚ö†Ô∏è Primary attempt failed with CONFIGURATION_NOT_FOUND. Using projects/config fallback..."

          fallback_response=$(curl -s -w '\n%{http_code}' -X PATCH \
            -H "Authorization: Bearer $access_token" \
            -H "Content-Type: application/json" \
            -d "{\"project\":\"$firebase_project_id\", \"signIn\":{\"email\":{\"enabled\":true}}}" \
            "https://identitytoolkit.googleapis.com/v2/projects/config?updateMask=signIn")

          fallback_code=$(echo "$fallback_response" | tail -n1)

          if [[ "$fallback_code" == "200" ]]; then
            echo "‚úÖ Email/Password authentication enabled via fallback endpoint."
            exit 0
          else
            echo "‚ùå Fallback failed. Response:"
            echo "$fallback_response"
            exit 1
          fi
        else
          echo "‚ùå Failed to enable Email/Password authentication. Response:"
          echo "$body"
          exit 1
        fi

options:
  logging: CLOUD_LOGGING_ONLY

substitutions:
  _ENVIRONMENT: 'dev'
  _FOLDER_NAME: 'soccer'

steps:
  # Step 1: Retrieve the project ID
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Checking if project starting with ${_FOLDER_NAME}-${_ENVIRONMENT} exists..."
        gcloud projects list \
          --filter="name~^${_FOLDER_NAME}-${_ENVIRONMENT}" \
          --format="value(projectId)" | head -n 1 > /workspace/SOCCER_PROJECT_ID.txt

        if [ ! -s /workspace/SOCCER_PROJECT_ID.txt ] || [ -z "$(cat /workspace/SOCCER_PROJECT_ID.txt)" ]; then
          echo "❌ Error: Project ID not found. Ensure the project exists."
          exit 1
        fi
        echo "✅ Using project: $(cat /workspace/SOCCER_PROJECT_ID.txt)"

  # Step 2: Enable Firebase APIs in the project
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "🔓 Enabling Firebase APIs for project $(cat /workspace/SOCCER_PROJECT_ID.txt)..."
        gcloud services enable firebase.googleapis.com --project="$(cat /workspace/SOCCER_PROJECT_ID.txt)"

  # Step 3: Enable Identity Toolkit API
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        firebase_project_id=$(cat /workspace/SOCCER_PROJECT_ID.txt)
        echo "🔓 Enabling Identity Toolkit API for project: $firebase_project_id..."
        gcloud services enable identitytoolkit.googleapis.com --project="$firebase_project_id"
        echo "✅ Identity Toolkit API enabled successfully!"

  # Step 4: Authenticate with Google Cloud and obtain an access token
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "🔑 Fetching Google Cloud authentication token..."
        access_token=$(gcloud auth print-access-token)
        echo "$access_token" > /workspace/access_token.txt
        echo "✅ Access token retrieved successfully."

  # Step 4.5: Register Firebase services using Management API
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        firebase_project_id=$(cat /workspace/SOCCER_PROJECT_ID.txt)
        access_token=$(cat /workspace/access_token.txt)

        echo "🚀 Registering Firebase services for project: $firebase_project_id..."
        curl -X POST \
          -H "Authorization: Bearer $access_token" \
          -H "Content-Type: application/json" \
          -d '{}' \
          "https://firebase.googleapis.com/v1beta1/projects/$firebase_project_id:addFirebase"
        echo "✅ Firebase project registration attempted."

  # Step 5: Enable Email/Password Authentication using Identity Toolkit API
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        firebase_project_id=$(cat /workspace/SOCCER_PROJECT_ID.txt)
        access_token=$(cat /workspace/access_token.txt)

        echo "🔑 Enabling Email/Password authentication for Firebase project: $firebase_project_id..."

        curl -X PATCH \
          -H "Authorization: Bearer $access_token" \
          -H "Content-Type: application/json" \
          -d '{
            "signIn": {
              "email": {
                "enabled": true
              }
            }
          }' \
          "https://identitytoolkit.googleapis.com/v2/projects/$firebase_project_id/config"

        echo "✅ Email/Password authentication enabled successfully!"

options:
  logging: CLOUD_LOGGING_ONLY

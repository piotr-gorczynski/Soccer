substitutions:
  _ENVIRONMENT: 'dev'
  _FOLDER_NAME: 'soccer'

steps:
  # Step 1: Retrieve the project ID
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        set -x
        echo "üîç Checking if project starting with ${_FOLDER_NAME}-${_ENVIRONMENT} exists..."
        gcloud projects list \
          --filter="name~^${_FOLDER_NAME}-${_ENVIRONMENT}" \
          --format="value(projectId)" | head -n 1 > /workspace/SOCCER_PROJECT_ID.txt

        if [ ! -s /workspace/SOCCER_PROJECT_ID.txt ] || [ -z "$(cat /workspace/SOCCER_PROJECT_ID.txt)" ]; then
          echo "‚ùå Error: Project ID not found. Ensure the project exists."
          exit 1
        fi
        echo "‚úÖ Using project: $(cat /workspace/SOCCER_PROJECT_ID.txt)"

  # ‚úÖ Step 2: Enable Firebase API with success check
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        set -x
        firebase_project_id=$(cat /workspace/SOCCER_PROJECT_ID.txt)
        echo "üîì Enabling Firebase API for project $firebase_project_id..."
        if gcloud services enable firebase.googleapis.com --project="$firebase_project_id"; then
          echo "‚úÖ Firebase API enabled successfully."
        else
          echo "‚ùå Failed to enable Firebase API for $firebase_project_id."
          echo "‚õî Exiting pipeline."
          exit 1
        fi

  # ‚úÖ Step 3: Enable Identity Toolkit API with success check
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        set -x
        firebase_project_id=$(cat /workspace/SOCCER_PROJECT_ID.txt)
        echo "üîì Enabling Identity Toolkit API for project: $firebase_project_id..."
        if gcloud services enable identitytoolkit.googleapis.com --project="$firebase_project_id"; then
          echo "‚úÖ Identity Toolkit API enabled successfully."
        else
          echo "‚ùå Failed to enable Identity Toolkit API for $firebase_project_id."
          echo "‚õî Exiting pipeline."
          exit 1
        fi

  # Step 4: Authenticate with Google Cloud and obtain an access token
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        set -x
        echo "üîë Fetching Google Cloud authentication token..."
        access_token=$(gcloud auth print-access-token)
        echo "$access_token" > /workspace/access_token.txt
        echo "‚úÖ Access token retrieved successfully."

  # Step 5: Register Firebase services using Firebase Management API
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        set -x
        firebase_project_id=$(cat /workspace/SOCCER_PROJECT_ID.txt)
        access_token=$(cat /workspace/access_token.txt)

        echo "üöÄ Registering Firebase services for project: $firebase_project_id..."
        response=$(curl -s -w "\n%{http_code}" -X POST \
          -H "Authorization: Bearer $access_token" \
          -H "Content-Type: application/json" \
          -d '{}' \
          "https://firebase.googleapis.com/v1beta1/projects/$firebase_project_id:addFirebase")

        http_code=$(echo "$response" | tail -n1)
        if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 409 ]; then
          echo "‚úÖ Firebase project registration successful or already exists."
        else
          echo "‚ùå Firebase project registration failed with status $http_code."
          echo "$response"
          exit 1
        fi

  # ‚úÖ Step 6: Enable Email/Password Authentication using Identity Toolkit v1 API
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        set -x
        firebase_project_id=$(cat /workspace/SOCCER_PROJECT_ID.txt)
        access_token=$(cat /workspace/access_token.txt)

        echo "üîë Enabling Email/Password authentication for Firebase project: $firebase_project_id..."
        response=$(curl -s -w "\n%{http_code}" -X PATCH \
          -H "Authorization: Bearer $access_token" \
          -H "Content-Type: application/json" \
          -d '{
            "signIn": {
              "email": {
                "enabled": true
              }
            }
          }' \
          "https://identitytoolkit.googleapis.com/v1/projects/$firebase_project_id/config")

        http_code=$(echo "$response" | tail -n1)
        if [ "$http_code" -eq 200 ]; then
          echo "‚úÖ Email/Password authentication enabled successfully."
        else
          echo "‚ùå Failed to enable Email/Password authentication."
          echo "$response"
          exit 1
        fi

options:
  logging: CLOUD_LOGGING_ONLY
